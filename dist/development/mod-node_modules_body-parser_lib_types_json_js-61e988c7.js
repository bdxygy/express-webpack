"use strict";exports.id="mod-node_modules_body-parser_lib_types_json_js-61e988c7",exports.ids=["mod-node_modules_body-parser_lib_types_json_js-61e988c7"],exports.modules={"./node_modules/body-parser/lib/types/json.js":(e,t,r)=>{var s=r("./node_modules/bytes/index.js"),o=r("./node_modules/content-type/index.js"),n=r("./node_modules/http-errors/index.js"),i=r("./node_modules/debug/src/index.js")("body-parser:json"),a=r("./node_modules/body-parser/lib/read.js"),d=r("./node_modules/type-is/index.js");e.exports=function(e){var t=e||{},r="number"!=typeof t.limit?s.parse(t.limit||"100kb"):t.limit,u=!1!==t.inflate,y=t.reviver,l=!1!==t.strict,f=t.type||"application/json",m=t.verify||!1;if(!1!==m&&"function"!=typeof m)throw new TypeError("option verify must be function");var v="function"!=typeof f?function(e){return function(t){return Boolean(d(t,e))}}(f):f;function b(e){if(0===e.length)return{};if(l){var t=(r=e,(s=c.exec(r))?s[1]:void 0);if("{"!==t&&"["!==t)throw i("strict violation"),function(e,t){var r=e.indexOf(t),s=-1!==r?e.substring(0,r)+"#":"";try{throw JSON.parse(s),new SyntaxError("strict violation")}catch(e){return p(e,{message:e.message.replace("#",t),stack:e.stack})}}(e,t)}var r,s;try{return i("parse json"),JSON.parse(e,y)}catch(e){throw p(e,{message:e.message,stack:e.stack})}}return function(e,t,s){if(e._body)return i("body already parsed"),void s();if(e.body=e.body||{},!d.hasBody(e))return i("skip empty body"),void s();if(i("content-type %j",e.headers["content-type"]),!v(e))return i("skip parsing"),void s();var c=function(e){try{return(o.parse(e).parameters.charset||"").toLowerCase()}catch(e){return}}(e)||"utf-8";if("utf-"!==c.slice(0,4))return i("invalid charset"),void s(n(415,'unsupported charset "'+c.toUpperCase()+'"',{charset:c,type:"charset.unsupported"}));a(e,t,s,b,i,{encoding:c,inflate:u,limit:r,verify:m})}};var c=/^[\x20\x09\x0a\x0d]*([^\x20\x09\x0a\x0d])/;function p(e,t){for(var r=Object.getOwnPropertyNames(e),s=0;s<r.length;s++){var o=r[s];"stack"!==o&&"message"!==o&&delete e[o]}return e.stack=t.stack.replace(e.message,t.message),e.message=t.message,e}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,