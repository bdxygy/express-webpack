"use strict";exports.id="mod-node_modules_iconv-lite_lib_extend-node_js-736d6a92",exports.ids=["mod-node_modules_iconv-lite_lib_extend-node_js-736d6a92"],exports.modules={"./node_modules/iconv-lite/lib/extend-node.js":(e,t,o)=>{var n=o("buffer").Buffer;e.exports=function(e){var t=void 0;e.supportsNodeEncodingsExtension=!(n.from||new n(0)instanceof Uint8Array),e.extendNodeEncodings=function(){if(!t){if(t={},!e.supportsNodeEncodingsExtension)return console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node"),void console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");var i={hex:!0,utf8:!0,"utf-8":!0,ascii:!0,binary:!0,base64:!0,ucs2:!0,"ucs-2":!0,utf16le:!0,"utf-16le":!0};n.isNativeEncoding=function(e){return e&&i[e.toLowerCase()]};var r=o("buffer").SlowBuffer;if(t.SlowBufferToString=r.prototype.toString,r.prototype.toString=function(o,i,r){return o=String(o||"utf8").toLowerCase(),n.isNativeEncoding(o)?t.SlowBufferToString.call(this,o,i,r):(void 0===i&&(i=0),void 0===r&&(r=this.length),e.decode(this.slice(i,r),o))},t.SlowBufferWrite=r.prototype.write,r.prototype.write=function(o,i,r,s){if(isFinite(i))isFinite(r)||(s=r,r=void 0);else{var d=s;s=i,i=r,r=d}i=+i||0;var f=this.length-i;if(r?(r=+r)>f&&(r=f):r=f,s=String(s||"utf8").toLowerCase(),n.isNativeEncoding(s))return t.SlowBufferWrite.call(this,o,i,r,s);if(o.length>0&&(r<0||i<0))throw new RangeError("attempt to write beyond buffer bounds");var c=e.encode(o,s);return c.length<r&&(r=c.length),c.copy(this,i,0,r),r},t.BufferIsEncoding=n.isEncoding,n.isEncoding=function(t){return n.isNativeEncoding(t)||e.encodingExists(t)},t.BufferByteLength=n.byteLength,n.byteLength=r.byteLength=function(o,i){return i=String(i||"utf8").toLowerCase(),n.isNativeEncoding(i)?t.BufferByteLength.call(this,o,i):e.encode(o,i).length},t.BufferToString=n.prototype.toString,n.prototype.toString=function(o,i,r){return o=String(o||"utf8").toLowerCase(),n.isNativeEncoding(o)?t.BufferToString.call(this,o,i,r):(void 0===i&&(i=0),void 0===r&&(r=this.length),e.decode(this.slice(i,r),o))},t.BufferWrite=n.prototype.write,n.prototype.write=function(o,i,r,s){var d=i,f=r,c=s;if(isFinite(i))isFinite(r)||(s=r,r=void 0);else{var u=s;s=i,i=r,r=u}if(s=String(s||"utf8").toLowerCase(),n.isNativeEncoding(s))return t.BufferWrite.call(this,o,d,f,c);i=+i||0;var g=this.length-i;if(r?(r=+r)>g&&(r=g):r=g,o.length>0&&(r<0||i<0))throw new RangeError("attempt to write beyond buffer bounds");var l=e.encode(o,s);return l.length<r&&(r=l.length),l.copy(this,i,0,r),r},e.supportsStreams){var s=o("stream").Readable;t.ReadableSetEncoding=s.prototype.setEncoding,s.prototype.setEncoding=function(t,o){this._readableState.decoder=e.getDecoder(t,o),this._readableState.encoding=t},s.prototype.collect=e._collect}}},e.undoExtendNodeEncodings=function(){if(e.supportsNodeEncodingsExtension){if(!t)throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");delete n.isNativeEncoding;var i=o("buffer").SlowBuffer;if(i.prototype.toString=t.SlowBufferToString,i.prototype.write=t.SlowBufferWrite,n.isEncoding=t.BufferIsEncoding,n.byteLength=t.BufferByteLength,n.prototype.toString=t.BufferToString,n.prototype.write=t.BufferWrite,e.supportsStreams){var r=o("stream").Readable;r.prototype.setEncoding=t.ReadableSetEncoding,delete r.prototype.collect}t=void 0}}}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,