"use strict";exports.id="mod-node_modules_serve-static_index_js-a1fd63ec",exports.ids=["mod-node_modules_serve-static_index_js-a1fd63ec"],exports.modules={"./node_modules/serve-static/index.js":(e,t,n)=>{var r=n("./node_modules/encodeurl/index.js"),o=n("./node_modules/escape-html/index.js"),s=n("./node_modules/parseurl/index.js"),a=n("path").resolve,d=n("./node_modules/send/index.js"),i=n("url");e.exports=function(e,t){if(!e)throw new TypeError("root path required");if("string"!=typeof e)throw new TypeError("root path must be a string");var n=Object.create(t||null),u=!1!==n.fallthrough,h=!1!==n.redirect,l=n.setHeaders;if(l&&"function"!=typeof l)throw new TypeError("option setHeaders must be function");n.maxage=n.maxage||n.maxAge||0,n.root=a(e);var m=h?function(e){if(this.hasTrailingSlash())this.error(404);else{var t=s.original(this.req);t.path=null,t.pathname=function(e){for(var t=0;t<e.length&&47===e.charCodeAt(t);t++);return t>1?"/"+e.substr(t):e}(t.pathname+"/");var n,a,d=r(i.format(t)),u=(n="Redirecting",a='Redirecting to <a href="'+o(d)+'">'+o(d)+"</a>",'<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>'+n+"</title>\n</head>\n<body>\n<pre>"+a+"</pre>\n</body>\n</html>\n");e.statusCode=301,e.setHeader("Content-Type","text/html; charset=UTF-8"),e.setHeader("Content-Length",Buffer.byteLength(u)),e.setHeader("Content-Security-Policy","default-src 'none'"),e.setHeader("X-Content-Type-Options","nosniff"),e.setHeader("Location",d),e.end(u)}}:function(){this.error(404)};return function(e,t,r){if("GET"!==e.method&&"HEAD"!==e.method)return u?r():(t.statusCode=405,t.setHeader("Allow","GET, HEAD"),t.setHeader("Content-Length","0"),void t.end());var o=!u,a=s.original(e),i=s(e).pathname;"/"===i&&"/"!==a.pathname.substr(-1)&&(i="");var h=d(e,i,n);h.on("directory",m),l&&h.on("headers",l),u&&h.on("file",(function(){o=!0})),h.on("error",(function(e){!o&&e.statusCode<500?r():r(e)})),h.pipe(t)}},e.exports.mime=d.mime}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,