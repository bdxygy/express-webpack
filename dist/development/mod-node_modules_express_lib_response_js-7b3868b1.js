"use strict";exports.id="mod-node_modules_express_lib_response_js-7b3868b1",exports.ids=["mod-node_modules_express_lib_response_js-7b3868b1"],exports.modules={"./node_modules/express/lib/response.js":(e,t,s)=>{var n=s("./node_modules/safe-buffer/index.js").Buffer,r=s("./node_modules/content-disposition/index.js"),o=s("./node_modules/http-errors/index.js"),i=s("./node_modules/depd/index.js")("express"),a=s("./node_modules/encodeurl/index.js"),u=s("./node_modules/escape-html/index.js"),d=s("http"),h=s("./node_modules/express/lib/utils.js").isAbsolute,c=s("./node_modules/on-finished/index.js"),f=s("path"),p=s("./node_modules/statuses/index.js"),l=s("./node_modules/utils-merge/index.js"),y=s("./node_modules/cookie-signature/index.js").sign,g=s("./node_modules/express/lib/utils.js").normalizeType,m=s("./node_modules/express/lib/utils.js").normalizeTypes,j=s("./node_modules/express/lib/utils.js").setCharset,v=s("./node_modules/cookie/index.js"),b=s("./node_modules/send/index.js"),C=f.extname,x=b.mime,T=f.resolve,_=s("./node_modules/vary/index.js"),E=Object.create(d.ServerResponse.prototype);e.exports=E;var w=/;\s*charset\s*=/;function A(e,t,s,n){var r,o=!1;function i(){if(!o){o=!0;var e=new Error("Request aborted");e.code="ECONNABORTED",n(e)}}function a(e){o||(o=!0,n(e))}t.on("directory",(function(){if(!o){o=!0;var e=new Error("EISDIR, read");e.code="EISDIR",n(e)}})),t.on("end",(function(){o||(o=!0,n())})),t.on("error",a),t.on("file",(function(){r=!1})),t.on("stream",(function(){r=!0})),c(e,(function(e){return e&&"ECONNRESET"===e.code?i():e?a(e):void(o||setImmediate((function(){!1===r||o?o||(o=!0,n()):i()})))})),s.headers&&t.on("headers",(function(e){for(var t=s.headers,n=Object.keys(t),r=0;r<n.length;r++){var o=n[r];e.setHeader(o,t[o])}})),t.pipe(e)}function k(e,t,s,n){var r=t||s?JSON.stringify(e,t,s):JSON.stringify(e);return n&&"string"==typeof r&&(r=r.replace(/[<>&]/g,(function(e){switch(e.charCodeAt(0)){case 60:return"\\u003c";case 62:return"\\u003e";case 38:return"\\u0026";default:return e}}))),r}E.status=function(e){return("string"==typeof e||Math.floor(e)!==e)&&e>99&&e<1e3&&i("res.status("+JSON.stringify(e)+"): use res.status("+Math.floor(e)+") instead"),this.statusCode=e,this},E.links=function(e){var t=this.get("Link")||"";return t&&(t+=", "),this.set("Link",t+Object.keys(e).map((function(t){return"<"+e[t]+'>; rel="'+t+'"'})).join(", "))},E.send=function(e){var t,s,r=e,o=this.req,a=this.app;switch(2===arguments.length&&("number"!=typeof arguments[0]&&"number"==typeof arguments[1]?(i("res.send(body, status): Use res.status(status).send(body) instead"),this.statusCode=arguments[1]):(i("res.send(status, body): Use res.status(status).send(body) instead"),this.statusCode=arguments[0],r=arguments[1])),"number"==typeof r&&1===arguments.length&&(this.get("Content-Type")||this.type("txt"),i("res.send(status): Use res.sendStatus(status) instead"),this.statusCode=r,r=p.message[r]),typeof r){case"string":this.get("Content-Type")||this.type("html");break;case"boolean":case"number":case"object":if(null===r)r="";else{if(!n.isBuffer(r))return this.json(r);this.get("Content-Type")||this.type("bin")}}"string"==typeof r&&(t="utf8","string"==typeof(s=this.get("Content-Type"))&&this.set("Content-Type",j(s,"utf-8")));var u,d,h=a.get("etag fn"),c=!this.get("ETag")&&"function"==typeof h;return void 0!==r&&(n.isBuffer(r)?u=r.length:!c&&r.length<1e3?u=n.byteLength(r,t):(r=n.from(r,t),t=void 0,u=r.length),this.set("Content-Length",u)),c&&void 0!==u&&(d=h(r,t))&&this.set("ETag",d),o.fresh&&(this.statusCode=304),204!==this.statusCode&&304!==this.statusCode||(this.removeHeader("Content-Type"),this.removeHeader("Content-Length"),this.removeHeader("Transfer-Encoding"),r=""),205===this.statusCode&&(this.set("Content-Length","0"),this.removeHeader("Transfer-Encoding"),r=""),"HEAD"===o.method?this.end():this.end(r,t),this},E.json=function(e){var t=e;2===arguments.length&&("number"==typeof arguments[1]?(i("res.json(obj, status): Use res.status(status).json(obj) instead"),this.statusCode=arguments[1]):(i("res.json(status, obj): Use res.status(status).json(obj) instead"),this.statusCode=arguments[0],t=arguments[1]));var s=this.app,n=s.get("json escape"),r=k(t,s.get("json replacer"),s.get("json spaces"),n);return this.get("Content-Type")||this.set("Content-Type","application/json"),this.send(r)},E.jsonp=function(e){var t=e;2===arguments.length&&("number"==typeof arguments[1]?(i("res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead"),this.statusCode=arguments[1]):(i("res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead"),this.statusCode=arguments[0],t=arguments[1]));var s=this.app,n=s.get("json escape"),r=k(t,s.get("json replacer"),s.get("json spaces"),n),o=this.req.query[s.get("jsonp callback name")];return this.get("Content-Type")||(this.set("X-Content-Type-Options","nosniff"),this.set("Content-Type","application/json")),Array.isArray(o)&&(o=o[0]),"string"==typeof o&&0!==o.length&&(this.set("X-Content-Type-Options","nosniff"),this.set("Content-Type","text/javascript"),o=o.replace(/[^\[\]\w$.]/g,""),void 0===r?r="":"string"==typeof r&&(r=r.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")),r="/**/ typeof "+o+" === 'function' && "+o+"("+r+");"),this.send(r)},E.sendStatus=function(e){var t=p.message[e]||String(e);return this.statusCode=e,this.type("txt"),this.send(t)},E.sendFile=function(e,t,s){var n=s,r=this.req,o=r.next,i=t||{};if(!e)throw new TypeError("path argument is required to res.sendFile");if("string"!=typeof e)throw new TypeError("path must be a string to res.sendFile");if("function"==typeof t&&(n=t,i={}),!i.root&&!h(e))throw new TypeError("path must be absolute or specify root to res.sendFile");var a=encodeURI(e);A(this,b(r,a,i),i,(function(e){return n?n(e):e&&"EISDIR"===e.code?o():void(e&&"ECONNABORTED"!==e.code&&"write"!==e.syscall&&o(e))}))},E.sendfile=function(e,t,s){var n=s,r=this.req,o=r.next,i=t||{};"function"==typeof t&&(n=t,i={}),A(this,b(r,e,i),i,(function(e){return n?n(e):e&&"EISDIR"===e.code?o():void(e&&"ECONNABORTED"!==e.code&&"write"!==e.syscall&&o(e))}))},E.sendfile=i.function(E.sendfile,"res.sendfile: Use res.sendFile instead"),E.download=function(e,t,s,n){var o=n,i=t,a=s||null;"function"==typeof t?(o=t,i=null,a=null):"function"==typeof s&&(o=s,a=null),"object"!=typeof t||"function"!=typeof s&&void 0!==s||(i=null,a=t);var u={"Content-Disposition":r(i||e)};if(a&&a.headers)for(var d=Object.keys(a.headers),h=0;h<d.length;h++){var c=d[h];"content-disposition"!==c.toLowerCase()&&(u[c]=a.headers[c])}(a=Object.create(a)).headers=u;var f=a.root?e:T(e);return this.sendFile(f,a,o)},E.contentType=E.type=function(e){var t=-1===e.indexOf("/")?x.lookup(e):e;return this.set("Content-Type",t)},E.format=function(e){var t=this.req,s=t.next,n=Object.keys(e).filter((function(e){return"default"!==e})),r=n.length>0&&t.accepts(n);return this.vary("Accept"),r?(this.set("Content-Type",g(r).value),e[r](t,this,s)):e.default?e.default(t,this,s):s(o(406,{types:m(n).map((function(e){return e.value}))})),this},E.attachment=function(e){return e&&this.type(C(e)),this.set("Content-Disposition",r(e)),this},E.append=function(e,t){var s=this.get(e),n=t;return s&&(n=Array.isArray(s)?s.concat(t):Array.isArray(t)?[s].concat(t):[s,t]),this.set(e,n)},E.set=E.header=function(e,t){if(2===arguments.length){var s=Array.isArray(t)?t.map(String):String(t);if("content-type"===e.toLowerCase()){if(Array.isArray(s))throw new TypeError("Content-Type cannot be set to an Array");if(!w.test(s)){var n=x.charsets.lookup(s.split(";")[0]);n&&(s+="; charset="+n.toLowerCase())}}this.setHeader(e,s)}else for(var r in e)this.set(r,e[r]);return this},E.get=function(e){return this.getHeader(e)},E.clearCookie=function(e,t){var s=l({expires:new Date(1),path:"/"},t);return this.cookie(e,"",s)},E.cookie=function(e,t,s){var n=l({},s),r=this.req.secret,o=n.signed;if(o&&!r)throw new Error('cookieParser("secret") required for signed cookies');var i="object"==typeof t?"j:"+JSON.stringify(t):String(t);if(o&&(i="s:"+y(i,r)),null!=n.maxAge){var a=n.maxAge-0;isNaN(a)||(n.expires=new Date(Date.now()+a),n.maxAge=Math.floor(a/1e3))}return null==n.path&&(n.path="/"),this.append("Set-Cookie",v.serialize(e,String(i),n)),this},E.location=function(e){var t=e;return"back"===e&&(t=this.req.get("Referrer")||"/"),this.set("Location",a(t))},E.redirect=function(e){var t,s=e,r=302;2===arguments.length&&("number"==typeof arguments[0]?(r=arguments[0],s=arguments[1]):(i("res.redirect(url, status): Use res.redirect(status, url) instead"),r=arguments[1])),s=this.location(s).get("Location"),this.format({text:function(){t=p.message[r]+". Redirecting to "+s},html:function(){var e=u(s);t="<p>"+p.message[r]+'. Redirecting to <a href="'+e+'">'+e+"</a></p>"},default:function(){t=""}}),this.statusCode=r,this.set("Content-Length",n.byteLength(t)),"HEAD"===this.req.method?this.end():this.end(t)},E.vary=function(e){return!e||Array.isArray(e)&&!e.length?(i("res.vary(): Provide a field name"),this):(_(this,e),this)},E.render=function(e,t,s){var n=this.req.app,r=s,o=t||{},i=this.req,a=this;"function"==typeof t&&(r=t,o={}),o._locals=a.locals,r=r||function(e,t){if(e)return i.next(e);a.send(t)},n.render(e,o,r)}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,