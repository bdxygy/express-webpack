"use strict";exports.id="mod-node_modules_range-parser_index_js-451fe5d4",exports.ids=["mod-node_modules_range-parser_index_js-451fe5d4"],exports.modules={"./node_modules/range-parser/index.js":e=>{function r(e,r){return{start:e.start,end:e.end,index:r}}function n(e){return{start:e.start,end:e.end}}function t(e,r){return e.index-r.index}function s(e,r){return e.start-r.start}e.exports=function(e,i,d){if("string"!=typeof i)throw new TypeError("argument str must be a string");var a=i.indexOf("=");if(-1===a)return-2;var o=i.slice(a+1).split(","),u=[];u.type=i.slice(0,a);for(var p=0;p<o.length;p++){var f=o[p].split("-"),x=parseInt(f[0],10),l=parseInt(f[1],10);isNaN(x)?(x=e-l,l=e-1):isNaN(l)&&(l=e-1),l>e-1&&(l=e-1),isNaN(x)||isNaN(l)||x>l||x<0||u.push({start:x,end:l})}if(u.length<1)return-1;return d&&d.combine?function(e){for(var i=e.map(r).sort(s),d=0,a=1;a<i.length;a++){var o=i[a],u=i[d];o.start>u.end+1?i[++d]=o:o.end>u.end&&(u.end=o.end,u.index=Math.min(u.index,o.index))}i.length=d+1;var p=i.sort(t).map(n);return p.type=e.type,p}(u):u}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLW5vZGVfbW9kdWxlc19yYW5nZS1wYXJzZXJfaW5kZXhfanMtNDUxZmU1ZDQuanMiLCJtYXBwaW5ncyI6InNNQTZIQSxTQUFTQSxFQUFjQyxFQUFPQyxHQUM1QixNQUFPLENBQ0xDLE1BQU9GLEVBQU1FLE1BQ2JDLElBQUtILEVBQU1HLElBQ1hGLE1BQU9BLEVBRVgsQ0FPQSxTQUFTRyxFQUFpQkosR0FDeEIsTUFBTyxDQUNMRSxNQUFPRixFQUFNRSxNQUNiQyxJQUFLSCxFQUFNRyxJQUVmLENBT0EsU0FBU0UsRUFBa0JDLEVBQUdDLEdBQzVCLE9BQU9ELEVBQUVMLE1BQVFNLEVBQUVOLEtBQ3JCLENBT0EsU0FBU08sRUFBa0JGLEVBQUdDLEdBQzVCLE9BQU9ELEVBQUVKLE1BQVFLLEVBQUVMLEtBQ3JCLENBbkpBTyxFQUFPQyxRQVlQLFNBQXNCQyxFQUFNQyxFQUFLQyxHQUMvQixHQUFtQixpQkFBUkQsRUFDVCxNQUFNLElBQUlFLFVBQVUsaUNBR3RCLElBQUliLEVBQVFXLEVBQUlHLFFBQVEsS0FFeEIsSUFBZSxJQUFYZCxFQUNGLE9BQVEsRUFJVixJQUFJZSxFQUFNSixFQUFJSyxNQUFNaEIsRUFBUSxHQUFHaUIsTUFBTSxLQUNqQ0MsRUFBUyxHQUdiQSxFQUFPQyxLQUFPUixFQUFJSyxNQUFNLEVBQUdoQixHQUczQixJQUFLLElBQUlvQixFQUFJLEVBQUdBLEVBQUlMLEVBQUlNLE9BQVFELElBQUssQ0FDbkMsSUFBSXJCLEVBQVFnQixFQUFJSyxHQUFHSCxNQUFNLEtBQ3JCaEIsRUFBUXFCLFNBQVN2QixFQUFNLEdBQUksSUFDM0JHLEVBQU1vQixTQUFTdkIsRUFBTSxHQUFJLElBR3pCd0IsTUFBTXRCLElBQ1JBLEVBQVFTLEVBQU9SLEVBQ2ZBLEVBQU1RLEVBQU8sR0FFSmEsTUFBTXJCLEtBQ2ZBLEVBQU1RLEVBQU8sR0FJWFIsRUFBTVEsRUFBTyxJQUNmUixFQUFNUSxFQUFPLEdBSVhhLE1BQU10QixJQUFVc0IsTUFBTXJCLElBQVFELEVBQVFDLEdBQU9ELEVBQVEsR0FLekRpQixFQUFPTSxLQUFLLENBQ1Z2QixNQUFPQSxFQUNQQyxJQUFLQSxHQUVULENBRUEsR0FBSWdCLEVBQU9HLE9BQVMsRUFFbEIsT0FBUSxFQUdWLE9BQU9ULEdBQVdBLEVBQVFhLFFBVTVCLFNBQXdCUCxHQUd0QixJQUZBLElBQUlRLEVBQVVSLEVBQU9TLElBQUk3QixHQUFjOEIsS0FBS3JCLEdBRW5Dc0IsRUFBSSxFQUFHVCxFQUFJLEVBQUdBLEVBQUlNLEVBQVFMLE9BQVFELElBQUssQ0FDOUMsSUFBSXJCLEVBQVEyQixFQUFRTixHQUNoQlUsRUFBVUosRUFBUUcsR0FFbEI5QixFQUFNRSxNQUFRNkIsRUFBUTVCLElBQU0sRUFFOUJ3QixJQUFVRyxHQUFLOUIsRUFDTkEsRUFBTUcsSUFBTTRCLEVBQVE1QixNQUU3QjRCLEVBQVE1QixJQUFNSCxFQUFNRyxJQUNwQjRCLEVBQVE5QixNQUFRK0IsS0FBS0MsSUFBSUYsRUFBUTlCLE1BQU9ELEVBQU1DLE9BRWxELENBR0EwQixFQUFRTCxPQUFTUSxFQUFJLEVBR3JCLElBQUlJLEVBQVdQLEVBQVFFLEtBQUt4QixHQUFrQnVCLElBQUl4QixHQUtsRCxPQUZBOEIsRUFBU2QsS0FBT0QsRUFBT0MsS0FFaEJjLENBQ1QsQ0FwQ01DLENBQWNoQixHQUNkQSxDQUNOLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYmR4eWd5L2V4cHJlc3Mtd2VicGFjay8uL25vZGVfbW9kdWxlcy9yYW5nZS1wYXJzZXIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiByYW5nZS1wYXJzZXJcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDE1LTIwMTYgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZ2VQYXJzZXJcblxuLyoqXG4gKiBQYXJzZSBcIlJhbmdlXCIgaGVhZGVyIGBzdHJgIHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBmaWxlIGBzaXplYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc2l6ZVxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcmFuZ2VQYXJzZXIgKHNpemUsIHN0ciwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzdHIgbXVzdCBiZSBhIHN0cmluZycpXG4gIH1cblxuICB2YXIgaW5kZXggPSBzdHIuaW5kZXhPZignPScpXG5cbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiAtMlxuICB9XG5cbiAgLy8gc3BsaXQgdGhlIHJhbmdlIHN0cmluZ1xuICB2YXIgYXJyID0gc3RyLnNsaWNlKGluZGV4ICsgMSkuc3BsaXQoJywnKVxuICB2YXIgcmFuZ2VzID0gW11cblxuICAvLyBhZGQgcmFuZ2VzIHR5cGVcbiAgcmFuZ2VzLnR5cGUgPSBzdHIuc2xpY2UoMCwgaW5kZXgpXG5cbiAgLy8gcGFyc2UgYWxsIHJhbmdlc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIHZhciByYW5nZSA9IGFycltpXS5zcGxpdCgnLScpXG4gICAgdmFyIHN0YXJ0ID0gcGFyc2VJbnQocmFuZ2VbMF0sIDEwKVxuICAgIHZhciBlbmQgPSBwYXJzZUludChyYW5nZVsxXSwgMTApXG5cbiAgICAvLyAtbm5uXG4gICAgaWYgKGlzTmFOKHN0YXJ0KSkge1xuICAgICAgc3RhcnQgPSBzaXplIC0gZW5kXG4gICAgICBlbmQgPSBzaXplIC0gMVxuICAgIC8vIG5ubi1cbiAgICB9IGVsc2UgaWYgKGlzTmFOKGVuZCkpIHtcbiAgICAgIGVuZCA9IHNpemUgLSAxXG4gICAgfVxuXG4gICAgLy8gbGltaXQgbGFzdC1ieXRlLXBvcyB0byBjdXJyZW50IGxlbmd0aFxuICAgIGlmIChlbmQgPiBzaXplIC0gMSkge1xuICAgICAgZW5kID0gc2l6ZSAtIDFcbiAgICB9XG5cbiAgICAvLyBpbnZhbGlkIG9yIHVuc2F0aXNpZmlhYmxlXG4gICAgaWYgKGlzTmFOKHN0YXJ0KSB8fCBpc05hTihlbmQpIHx8IHN0YXJ0ID4gZW5kIHx8IHN0YXJ0IDwgMCkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICAvLyBhZGQgcmFuZ2VcbiAgICByYW5nZXMucHVzaCh7XG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IGVuZFxuICAgIH0pXG4gIH1cblxuICBpZiAocmFuZ2VzLmxlbmd0aCA8IDEpIHtcbiAgICAvLyB1bnNhdGlzaWZpYWJsZVxuICAgIHJldHVybiAtMVxuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5jb21iaW5lXG4gICAgPyBjb21iaW5lUmFuZ2VzKHJhbmdlcylcbiAgICA6IHJhbmdlc1xufVxuXG4vKipcbiAqIENvbWJpbmUgb3ZlcmxhcHBpbmcgJiBhZGphY2VudCByYW5nZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbWJpbmVSYW5nZXMgKHJhbmdlcykge1xuICB2YXIgb3JkZXJlZCA9IHJhbmdlcy5tYXAobWFwV2l0aEluZGV4KS5zb3J0KHNvcnRCeVJhbmdlU3RhcnQpXG5cbiAgZm9yICh2YXIgaiA9IDAsIGkgPSAxOyBpIDwgb3JkZXJlZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciByYW5nZSA9IG9yZGVyZWRbaV1cbiAgICB2YXIgY3VycmVudCA9IG9yZGVyZWRbal1cblxuICAgIGlmIChyYW5nZS5zdGFydCA+IGN1cnJlbnQuZW5kICsgMSkge1xuICAgICAgLy8gbmV4dCByYW5nZVxuICAgICAgb3JkZXJlZFsrK2pdID0gcmFuZ2VcbiAgICB9IGVsc2UgaWYgKHJhbmdlLmVuZCA+IGN1cnJlbnQuZW5kKSB7XG4gICAgICAvLyBleHRlbmQgcmFuZ2VcbiAgICAgIGN1cnJlbnQuZW5kID0gcmFuZ2UuZW5kXG4gICAgICBjdXJyZW50LmluZGV4ID0gTWF0aC5taW4oY3VycmVudC5pbmRleCwgcmFuZ2UuaW5kZXgpXG4gICAgfVxuICB9XG5cbiAgLy8gdHJpbSBvcmRlcmVkIGFycmF5XG4gIG9yZGVyZWQubGVuZ3RoID0gaiArIDFcblxuICAvLyBnZW5lcmF0ZSBjb21iaW5lZCByYW5nZVxuICB2YXIgY29tYmluZWQgPSBvcmRlcmVkLnNvcnQoc29ydEJ5UmFuZ2VJbmRleCkubWFwKG1hcFdpdGhvdXRJbmRleClcblxuICAvLyBjb3B5IHJhbmdlcyB0eXBlXG4gIGNvbWJpbmVkLnR5cGUgPSByYW5nZXMudHlwZVxuXG4gIHJldHVybiBjb21iaW5lZFxufVxuXG4vKipcbiAqIE1hcCBmdW5jdGlvbiB0byBhZGQgaW5kZXggdmFsdWUgdG8gcmFuZ2VzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXggKHJhbmdlLCBpbmRleCkge1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiByYW5nZS5zdGFydCxcbiAgICBlbmQ6IHJhbmdlLmVuZCxcbiAgICBpbmRleDogaW5kZXhcbiAgfVxufVxuXG4vKipcbiAqIE1hcCBmdW5jdGlvbiB0byByZW1vdmUgaW5kZXggdmFsdWUgZnJvbSByYW5nZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1hcFdpdGhvdXRJbmRleCAocmFuZ2UpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogcmFuZ2Uuc3RhcnQsXG4gICAgZW5kOiByYW5nZS5lbmRcbiAgfVxufVxuXG4vKipcbiAqIFNvcnQgZnVuY3Rpb24gdG8gc29ydCByYW5nZXMgYnkgaW5kZXguXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNvcnRCeVJhbmdlSW5kZXggKGEsIGIpIHtcbiAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4XG59XG5cbi8qKlxuICogU29ydCBmdW5jdGlvbiB0byBzb3J0IHJhbmdlcyBieSBzdGFydCBwb3NpdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc29ydEJ5UmFuZ2VTdGFydCAoYSwgYikge1xuICByZXR1cm4gYS5zdGFydCAtIGIuc3RhcnRcbn1cbiJdLCJuYW1lcyI6WyJtYXBXaXRoSW5kZXgiLCJyYW5nZSIsImluZGV4Iiwic3RhcnQiLCJlbmQiLCJtYXBXaXRob3V0SW5kZXgiLCJzb3J0QnlSYW5nZUluZGV4IiwiYSIsImIiLCJzb3J0QnlSYW5nZVN0YXJ0IiwibW9kdWxlIiwiZXhwb3J0cyIsInNpemUiLCJzdHIiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwiaW5kZXhPZiIsImFyciIsInNsaWNlIiwic3BsaXQiLCJyYW5nZXMiLCJ0eXBlIiwiaSIsImxlbmd0aCIsInBhcnNlSW50IiwiaXNOYU4iLCJwdXNoIiwiY29tYmluZSIsIm9yZGVyZWQiLCJtYXAiLCJzb3J0IiwiaiIsImN1cnJlbnQiLCJNYXRoIiwibWluIiwiY29tYmluZWQiLCJjb21iaW5lUmFuZ2VzIl0sInNvdXJjZVJvb3QiOiIifQ==