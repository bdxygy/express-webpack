exports.id="mod-node_modules_mime_mime_js-0db8f387",exports.ids=["mod-node_modules_mime_mime_js-0db8f387"],exports.modules={"./node_modules/mime/mime.js":(e,t,s)=>{s("path");var o=s("fs");function n(){this.types=Object.create(null),this.extensions=Object.create(null)}n.prototype.define=function(e){for(var t in e){for(var s=e[t],o=0;o<s.length;o++)process.env.DEBUG_MIME&&this.types[s[o]]&&console.warn((this._loading||"define()").replace(/.*\//,""),'changes "'+s[o]+'" extension type from '+this.types[s[o]]+" to "+t),this.types[s[o]]=t;this.extensions[t]||(this.extensions[t]=s[0])}},n.prototype.load=function(e){this._loading=e;var t={};o.readFileSync(e,"ascii").split(/[\r\n]+/).forEach((function(e){var s=e.replace(/\s*#.*|^\s*|\s*$/g,"").split(/\s+/);t[s.shift()]=s})),this.define(t),this._loading=null},n.prototype.lookup=function(e,t){var s=e.replace(/^.*[\.\/\\]/,"").toLowerCase();return this.types[s]||t||this.default_type},n.prototype.extension=function(e){var t=e.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();return this.extensions[t]};var i=new n;i.define(s("./node_modules/mime/types.json")),i.default_type=i.lookup("bin"),i.Mime=n,i.charsets={lookup:function(e,t){return/^text\/|^application\/(javascript|json)/.test(e)?"UTF-8":t}},e.exports=i}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLW5vZGVfbW9kdWxlc19taW1lX21pbWVfanMtMGRiOGYzODcuanMiLCJtYXBwaW5ncyI6Im9LQUFXLEVBQVEsUUFBbkIsSUFDSUEsRUFBSyxFQUFRLE1BRWpCLFNBQVNDLElBRVBDLEtBQUtDLE1BQVFDLE9BQU9DLE9BQU8sTUFHM0JILEtBQUtJLFdBQWFGLE9BQU9DLE9BQU8sS0FDbEMsQ0FXQUosRUFBS00sVUFBVUMsT0FBUyxTQUFVQyxHQUNoQyxJQUFLLElBQUlDLEtBQVFELEVBQUssQ0FFcEIsSUFEQSxJQUFJRSxFQUFPRixFQUFJQyxHQUNORSxFQUFJLEVBQUdBLEVBQUlELEVBQUtFLE9BQVFELElBQzNCRSxRQUFRQyxJQUFJQyxZQUFjZCxLQUFLQyxNQUFNUSxFQUFLQyxLQUM1Q0ssUUFBUUMsTUFBTWhCLEtBQUtpQixVQUFZLFlBQVlDLFFBQVEsT0FBUSxJQUFLLFlBQWNULEVBQUtDLEdBQUsseUJBQ3RGVixLQUFLQyxNQUFNUSxFQUFLQyxJQUFNLE9BQVNGLEdBR25DUixLQUFLQyxNQUFNUSxFQUFLQyxJQUFNRixFQUluQlIsS0FBS0ksV0FBV0ksS0FDbkJSLEtBQUtJLFdBQVdJLEdBQVFDLEVBQUssR0FFakMsQ0FDRixFQVVBVixFQUFLTSxVQUFVYyxLQUFPLFNBQVNDLEdBQzdCcEIsS0FBS2lCLFNBQVdHLEVBRWhCLElBQUliLEVBQU0sQ0FBQyxFQUNHVCxFQUFHdUIsYUFBYUQsRUFBTSxTQUNoQkUsTUFBTSxXQUVwQkMsU0FBUSxTQUFTQyxHQUVyQixJQUFJQyxFQUFTRCxFQUFLTixRQUFRLG9CQUFxQixJQUFJSSxNQUFNLE9BQ3pEZixFQUFJa0IsRUFBT0MsU0FBV0QsQ0FDeEIsSUFFQXpCLEtBQUtNLE9BQU9DLEdBRVpQLEtBQUtpQixTQUFXLElBQ2xCLEVBS0FsQixFQUFLTSxVQUFVc0IsT0FBUyxTQUFTQyxFQUFNQyxHQUNyQyxJQUFJQyxFQUFNRixFQUFLVixRQUFRLGNBQWUsSUFBSWEsY0FFMUMsT0FBTy9CLEtBQUtDLE1BQU02QixJQUFRRCxHQUFZN0IsS0FBS2dDLFlBQzdDLEVBS0FqQyxFQUFLTSxVQUFVNEIsVUFBWSxTQUFTQyxHQUNsQyxJQUFJMUIsRUFBTzBCLEVBQVNDLE1BQU0sMkJBQTJCLEdBQUdKLGNBQ3hELE9BQU8vQixLQUFLSSxXQUFXSSxFQUN6QixFQUdBLElBQUk0QixFQUFPLElBQUlyQyxFQUdmcUMsRUFBSzlCLE9BQU8sRUFBUSxtQ0FHcEI4QixFQUFLSixhQUFlSSxFQUFLVCxPQUFPLE9BTWhDUyxFQUFLckMsS0FBT0EsRUFLWnFDLEVBQUtDLFNBQVcsQ0FDZFYsT0FBUSxTQUFTTyxFQUFVTCxHQUV6QixNQUFPLDBDQUE0Q1MsS0FBS0osR0FBWSxRQUFVTCxDQUNoRixHQUdGVSxFQUFPQyxRQUFVSixDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGJkeHlneS9leHByZXNzLXdlYnBhY2svLi9ub2RlX21vZHVsZXMvbWltZS9taW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuZnVuY3Rpb24gTWltZSgpIHtcbiAgLy8gTWFwIG9mIGV4dGVuc2lvbiAtPiBtaW1lIHR5cGVcbiAgdGhpcy50eXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy8gTWFwIG9mIG1pbWUgdHlwZSAtPiBleHRlbnNpb25cbiAgdGhpcy5leHRlbnNpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgbWltZXR5cGUgLT4gZXh0ZW5zaW9uIG1hcHBpbmdzLiAgRWFjaCBrZXkgaXMgYSBtaW1lLXR5cGUgdGhhdCBtYXBzXG4gKiB0byBhbiBhcnJheSBvZiBleHRlbnNpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGUgdHlwZS4gIFRoZSBmaXJzdCBleHRlbnNpb24gaXNcbiAqIHVzZWQgYXMgdGhlIGRlZmF1bHQgZXh0ZW5zaW9uIGZvciB0aGUgdHlwZS5cbiAqXG4gKiBlLmcuIG1pbWUuZGVmaW5lKHsnYXVkaW8vb2dnJywgWydvZ2EnLCAnb2dnJywgJ3NweCddfSk7XG4gKlxuICogQHBhcmFtIG1hcCAoT2JqZWN0KSB0eXBlIGRlZmluaXRpb25zXG4gKi9cbk1pbWUucHJvdG90eXBlLmRlZmluZSA9IGZ1bmN0aW9uIChtYXApIHtcbiAgZm9yICh2YXIgdHlwZSBpbiBtYXApIHtcbiAgICB2YXIgZXh0cyA9IG1hcFt0eXBlXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5ERUJVR19NSU1FICYmIHRoaXMudHlwZXNbZXh0c1tpXV0pIHtcbiAgICAgICAgY29uc29sZS53YXJuKCh0aGlzLl9sb2FkaW5nIHx8IFwiZGVmaW5lKClcIikucmVwbGFjZSgvLipcXC8vLCAnJyksICdjaGFuZ2VzIFwiJyArIGV4dHNbaV0gKyAnXCIgZXh0ZW5zaW9uIHR5cGUgZnJvbSAnICtcbiAgICAgICAgICB0aGlzLnR5cGVzW2V4dHNbaV1dICsgJyB0byAnICsgdHlwZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudHlwZXNbZXh0c1tpXV0gPSB0eXBlO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgZXh0ZW5zaW9uIGlzIHRoZSBmaXJzdCBvbmUgd2UgZW5jb3VudGVyXG4gICAgaWYgKCF0aGlzLmV4dGVuc2lvbnNbdHlwZV0pIHtcbiAgICAgIHRoaXMuZXh0ZW5zaW9uc1t0eXBlXSA9IGV4dHNbMF07XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIExvYWQgYW4gQXBhY2hlMi1zdHlsZSBcIi50eXBlc1wiIGZpbGVcbiAqXG4gKiBUaGlzIG1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgKGl0J3MgZXhwZWN0ZWQpLiAgV2hlcmUgZmlsZXMgZGVjbGFyZVxuICogb3ZlcmxhcHBpbmcgdHlwZXMvZXh0ZW5zaW9ucywgdGhlIGxhc3QgZmlsZSB3aW5zLlxuICpcbiAqIEBwYXJhbSBmaWxlIChTdHJpbmcpIHBhdGggb2YgZmlsZSB0byBsb2FkLlxuICovXG5NaW1lLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oZmlsZSkge1xuICB0aGlzLl9sb2FkaW5nID0gZmlsZTtcbiAgLy8gUmVhZCBmaWxlIGFuZCBzcGxpdCBpbnRvIGxpbmVzXG4gIHZhciBtYXAgPSB7fSxcbiAgICAgIGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgJ2FzY2lpJyksXG4gICAgICBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoL1tcXHJcXG5dKy8pO1xuXG4gIGxpbmVzLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIC8vIENsZWFuIHVwIHdoaXRlc3BhY2UvY29tbWVudHMsIGFuZCBzcGxpdCBpbnRvIGZpZWxkc1xuICAgIHZhciBmaWVsZHMgPSBsaW5lLnJlcGxhY2UoL1xccyojLip8Xlxccyp8XFxzKiQvZywgJycpLnNwbGl0KC9cXHMrLyk7XG4gICAgbWFwW2ZpZWxkcy5zaGlmdCgpXSA9IGZpZWxkcztcbiAgfSk7XG5cbiAgdGhpcy5kZWZpbmUobWFwKTtcblxuICB0aGlzLl9sb2FkaW5nID0gbnVsbDtcbn07XG5cbi8qKlxuICogTG9va3VwIGEgbWltZSB0eXBlIGJhc2VkIG9uIGV4dGVuc2lvblxuICovXG5NaW1lLnByb3RvdHlwZS5sb29rdXAgPSBmdW5jdGlvbihwYXRoLCBmYWxsYmFjaykge1xuICB2YXIgZXh0ID0gcGF0aC5yZXBsYWNlKC9eLipbXFwuXFwvXFxcXF0vLCAnJykudG9Mb3dlckNhc2UoKTtcblxuICByZXR1cm4gdGhpcy50eXBlc1tleHRdIHx8IGZhbGxiYWNrIHx8IHRoaXMuZGVmYXVsdF90eXBlO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gZmlsZSBleHRlbnNpb24gYXNzb2NpYXRlZCB3aXRoIGEgbWltZSB0eXBlXG4gKi9cbk1pbWUucHJvdG90eXBlLmV4dGVuc2lvbiA9IGZ1bmN0aW9uKG1pbWVUeXBlKSB7XG4gIHZhciB0eXBlID0gbWltZVR5cGUubWF0Y2goL15cXHMqKFteO1xcc10qKSg/Ojt8XFxzfCQpLylbMV0udG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uc1t0eXBlXTtcbn07XG5cbi8vIERlZmF1bHQgaW5zdGFuY2VcbnZhciBtaW1lID0gbmV3IE1pbWUoKTtcblxuLy8gRGVmaW5lIGJ1aWx0LWluIHR5cGVzXG5taW1lLmRlZmluZShyZXF1aXJlKCcuL3R5cGVzLmpzb24nKSk7XG5cbi8vIERlZmF1bHQgdHlwZVxubWltZS5kZWZhdWx0X3R5cGUgPSBtaW1lLmxvb2t1cCgnYmluJyk7XG5cbi8vXG4vLyBBZGRpdGlvbmFsIEFQSSBzcGVjaWZpYyB0byB0aGUgZGVmYXVsdCBpbnN0YW5jZVxuLy9cblxubWltZS5NaW1lID0gTWltZTtcblxuLyoqXG4gKiBMb29rdXAgYSBjaGFyc2V0IGJhc2VkIG9uIG1pbWUgdHlwZS5cbiAqL1xubWltZS5jaGFyc2V0cyA9IHtcbiAgbG9va3VwOiBmdW5jdGlvbihtaW1lVHlwZSwgZmFsbGJhY2spIHtcbiAgICAvLyBBc3N1bWUgdGV4dCB0eXBlcyBhcmUgdXRmOFxuICAgIHJldHVybiAoL150ZXh0XFwvfF5hcHBsaWNhdGlvblxcLyhqYXZhc2NyaXB0fGpzb24pLykudGVzdChtaW1lVHlwZSkgPyAnVVRGLTgnIDogZmFsbGJhY2s7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWltZTtcbiJdLCJuYW1lcyI6WyJmcyIsIk1pbWUiLCJ0aGlzIiwidHlwZXMiLCJPYmplY3QiLCJjcmVhdGUiLCJleHRlbnNpb25zIiwicHJvdG90eXBlIiwiZGVmaW5lIiwibWFwIiwidHlwZSIsImV4dHMiLCJpIiwibGVuZ3RoIiwicHJvY2VzcyIsImVudiIsIkRFQlVHX01JTUUiLCJjb25zb2xlIiwid2FybiIsIl9sb2FkaW5nIiwicmVwbGFjZSIsImxvYWQiLCJmaWxlIiwicmVhZEZpbGVTeW5jIiwic3BsaXQiLCJmb3JFYWNoIiwibGluZSIsImZpZWxkcyIsInNoaWZ0IiwibG9va3VwIiwicGF0aCIsImZhbGxiYWNrIiwiZXh0IiwidG9Mb3dlckNhc2UiLCJkZWZhdWx0X3R5cGUiLCJleHRlbnNpb24iLCJtaW1lVHlwZSIsIm1hdGNoIiwibWltZSIsImNoYXJzZXRzIiwidGVzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9