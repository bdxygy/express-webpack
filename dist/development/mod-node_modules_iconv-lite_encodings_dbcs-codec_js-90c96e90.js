"use strict";exports.id="mod-node_modules_iconv-lite_encodings_dbcs-codec_js-90c96e90",exports.ids=["mod-node_modules_iconv-lite_encodings_dbcs-codec_js-90c96e90"],exports.modules={"./node_modules/iconv-lite/encodings/dbcs-codec.js":(e,t,o)=>{var i=o("./node_modules/safer-buffer/safer.js").Buffer;t._dbcs=c;for(var r=-1,d=-2,s=-10,n=-1e3,a=new Array(256),h=0;h<256;h++)a[h]=r;function c(e,t){if(this.encodingName=e.encodingName,!e)throw new Error("DBCS codec is called without the data.");if(!e.table)throw new Error("Encoding '"+this.encodingName+"' has no data.");var o=e.table();this.decodeTables=[],this.decodeTables[0]=a.slice(0),this.decodeTableSeq=[];for(var i=0;i<o.length;i++)this._addDecodeChunk(o[i]);this.defaultCharUnicode=t.defaultCharUnicode,this.encodeTable=[],this.encodeTableSeq=[];var s={};if(e.encodeSkipVals)for(i=0;i<e.encodeSkipVals.length;i++){var h=e.encodeSkipVals[i];if("number"==typeof h)s[h]=!0;else for(var c=h.from;c<=h.to;c++)s[c]=!0}if(this._fillEncodeTable(0,0,s),e.encodeAdd)for(var l in e.encodeAdd)Object.prototype.hasOwnProperty.call(e.encodeAdd,l)&&this._setEncodeChar(l.charCodeAt(0),e.encodeAdd[l]);if(this.defCharSB=this.encodeTable[0][t.defaultCharSingleByte.charCodeAt(0)],this.defCharSB===r&&(this.defCharSB=this.encodeTable[0]["?"]),this.defCharSB===r&&(this.defCharSB="?".charCodeAt(0)),"function"==typeof e.gb18030){this.gb18030=e.gb18030();var f=this.decodeTables.length,u=this.decodeTables[f]=a.slice(0),b=this.decodeTables.length,g=this.decodeTables[b]=a.slice(0);for(i=129;i<=254;i++){var v=n-this.decodeTables[0][i],p=this.decodeTables[v];for(c=48;c<=57;c++)p[c]=n-f}for(i=129;i<=254;i++)u[i]=n-b;for(i=48;i<=57;i++)g[i]=d}}function l(e,t){this.leadSurrogate=-1,this.seqObj=void 0,this.encodeTable=t.encodeTable,this.encodeTableSeq=t.encodeTableSeq,this.defaultCharSingleByte=t.defCharSB,this.gb18030=t.gb18030}function f(e,t){this.nodeIdx=0,this.prevBuf=i.alloc(0),this.decodeTables=t.decodeTables,this.decodeTableSeq=t.decodeTableSeq,this.defaultCharUnicode=t.defaultCharUnicode,this.gb18030=t.gb18030}function u(e,t){if(e[0]>t)return-1;for(var o=0,i=e.length;o<i-1;){var r=o+Math.floor((i-o+1)/2);e[r]<=t?o=r:i=r}return o}c.prototype.encoder=l,c.prototype.decoder=f,c.prototype._getDecodeTrieNode=function(e){for(var t=[];e>0;e>>=8)t.push(255&e);0==t.length&&t.push(0);for(var o=this.decodeTables[0],i=t.length-1;i>0;i--){var d=o[t[i]];if(d==r)o[t[i]]=n-this.decodeTables.length,this.decodeTables.push(o=a.slice(0));else{if(!(d<=n))throw new Error("Overwrite byte in "+this.encodingName+", addr: "+e.toString(16));o=this.decodeTables[n-d]}}return o},c.prototype._addDecodeChunk=function(e){var t=parseInt(e[0],16),o=this._getDecodeTrieNode(t);t&=255;for(var i=1;i<e.length;i++){var r=e[i];if("string"==typeof r)for(var d=0;d<r.length;){var n=r.charCodeAt(d++);if(55296<=n&&n<56320){var a=r.charCodeAt(d++);if(!(56320<=a&&a<57344))throw new Error("Incorrect surrogate pair in "+this.encodingName+" at chunk "+e[0]);o[t++]=65536+1024*(n-55296)+(a-56320)}else if(4080<n&&n<=4095){for(var h=4095-n+2,c=[],l=0;l<h;l++)c.push(r.charCodeAt(d++));o[t++]=s-this.decodeTableSeq.length,this.decodeTableSeq.push(c)}else o[t++]=n}else{if("number"!=typeof r)throw new Error("Incorrect type '"+typeof r+"' given in "+this.encodingName+" at chunk "+e[0]);var f=o[t-1]+1;for(d=0;d<r;d++)o[t++]=f++}}if(t>255)throw new Error("Incorrect chunk in "+this.encodingName+" at addr "+e[0]+": too long"+t)},c.prototype._getEncodeBucket=function(e){var t=e>>8;return void 0===this.encodeTable[t]&&(this.encodeTable[t]=a.slice(0)),this.encodeTable[t]},c.prototype._setEncodeChar=function(e,t){var o=this._getEncodeBucket(e),i=255&e;o[i]<=s?this.encodeTableSeq[s-o[i]][-1]=t:o[i]==r&&(o[i]=t)},c.prototype._setEncodeSequence=function(e,t){var o,i=e[0],d=this._getEncodeBucket(i),n=255&i;d[n]<=s?o=this.encodeTableSeq[s-d[n]]:(o={},d[n]!==r&&(o[-1]=d[n]),d[n]=s-this.encodeTableSeq.length,this.encodeTableSeq.push(o));for(var a=1;a<e.length-1;a++){var h=o[i];"object"==typeof h?o=h:(o=o[i]={},void 0!==h&&(o[-1]=h))}o[i=e[e.length-1]]=t},c.prototype._fillEncodeTable=function(e,t,o){for(var i=this.decodeTables[e],r=0;r<256;r++){var d=i[r],a=t+r;o[a]||(d>=0?this._setEncodeChar(d,a):d<=n?this._fillEncodeTable(n-d,a<<8,o):d<=s&&this._setEncodeSequence(this.decodeTableSeq[s-d],a))}},l.prototype.write=function(e){for(var t=i.alloc(e.length*(this.gb18030?4:3)),o=this.leadSurrogate,d=this.seqObj,n=-1,a=0,h=0;;){if(-1===n){if(a==e.length)break;var c=e.charCodeAt(a++)}else{c=n;n=-1}if(55296<=c&&c<57344)if(c<56320){if(-1===o){o=c;continue}o=c,c=r}else-1!==o?(c=65536+1024*(o-55296)+(c-56320),o=-1):c=r;else-1!==o&&(n=c,c=r,o=-1);var l=r;if(void 0!==d&&c!=r){var f=d[c];if("object"==typeof f){d=f;continue}"number"==typeof f?l=f:null==f&&void 0!==(f=d[-1])&&(l=f,n=c),d=void 0}else if(c>=0){var b=this.encodeTable[c>>8];if(void 0!==b&&(l=b[255&c]),l<=s){d=this.encodeTableSeq[s-l];continue}if(l==r&&this.gb18030){var g=u(this.gb18030.uChars,c);if(-1!=g){l=this.gb18030.gbChars[g]+(c-this.gb18030.uChars[g]);t[h++]=129+Math.floor(l/12600),l%=12600,t[h++]=48+Math.floor(l/1260),l%=1260,t[h++]=129+Math.floor(l/10),l%=10,t[h++]=48+l;continue}}}l===r&&(l=this.defaultCharSingleByte),l<256?t[h++]=l:l<65536?(t[h++]=l>>8,t[h++]=255&l):(t[h++]=l>>16,t[h++]=l>>8&255,t[h++]=255&l)}return this.seqObj=d,this.leadSurrogate=o,t.slice(0,h)},l.prototype.end=function(){if(-1!==this.leadSurrogate||void 0!==this.seqObj){var e=i.alloc(10),t=0;if(this.seqObj){var o=this.seqObj[-1];void 0!==o&&(o<256?e[t++]=o:(e[t++]=o>>8,e[t++]=255&o)),this.seqObj=void 0}return-1!==this.leadSurrogate&&(e[t++]=this.defaultCharSingleByte,this.leadSurrogate=-1),e.slice(0,t)}},l.prototype.findIdx=u,f.prototype.write=function(e){var t=i.alloc(2*e.length),o=this.nodeIdx,a=this.prevBuf,h=this.prevBuf.length,c=-this.prevBuf.length;h>0&&(a=i.concat([a,e.slice(0,10)]));for(var l=0,f=0;l<e.length;l++){var b,g=l>=0?e[l]:a[l+h];if((b=this.decodeTables[o][g])>=0);else if(b===r)l=c,b=this.defaultCharUnicode.charCodeAt(0);else if(b===d){var v=c>=0?e.slice(c,l+1):a.slice(c+h,l+1+h),p=12600*(v[0]-129)+1260*(v[1]-48)+10*(v[2]-129)+(v[3]-48),T=u(this.gb18030.gbChars,p);b=this.gb18030.uChars[T]+p-this.gb18030.gbChars[T]}else{if(b<=n){o=n-b;continue}if(!(b<=s))throw new Error("iconv-lite internal error: invalid decoding table value "+b+" at "+o+"/"+g);for(var S=this.decodeTableSeq[s-b],C=0;C<S.length-1;C++)b=S[C],t[f++]=255&b,t[f++]=b>>8;b=S[S.length-1]}if(b>65535){b-=65536;var y=55296+Math.floor(b/1024);t[f++]=255&y,t[f++]=y>>8,b=56320+b%1024}t[f++]=255&b,t[f++]=b>>8,o=0,c=l+1}return this.nodeIdx=o,this.prevBuf=c>=0?e.slice(c):a.slice(c+h),t.slice(0,f).toString("ucs2")},f.prototype.end=function(){for(var e="";this.prevBuf.length>0;){e+=this.defaultCharUnicode;var t=this.prevBuf.slice(1);this.prevBuf=i.alloc(0),this.nodeIdx=0,t.length>0&&(e+=this.write(t))}return this.nodeIdx=0,e}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,