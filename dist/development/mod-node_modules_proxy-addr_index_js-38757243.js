"use strict";exports.id="mod-node_modules_proxy-addr_index_js-38757243",exports.ids=["mod-node_modules_proxy-addr_index_js-38757243"],exports.modules={"./node_modules/proxy-addr/index.js":(r,e,n)=>{r.exports=function(r,e){if(!r)throw new TypeError("req argument is required");if(!e)throw new TypeError("trust argument is required");var n=u(r,e);return n[n.length-1]},r.exports.all=u,r.exports.compile=p;var t=n("./node_modules/forwarded/index.js"),i=n("./node_modules/ipaddr.js/lib/ipaddr.js"),d=/^[0-9]+$/,o=i.isValid,s=i.parse,a={linklocal:["169.254.0.0/16","fe80::/10"],loopback:["127.0.0.1/8","::1/128"],uniquelocal:["10.0.0.0/8","172.16.0.0/12","192.168.0.0/16","fc00::/7"]};function u(r,e){var n=t(r);if(!e)return n;"function"!=typeof e&&(e=p(e));for(var i=0;i<n.length-1;i++)e(n[i],i)||(n.length=i+1);return n}function p(r){if(!r)throw new TypeError("argument is required");var e,n,t,i,d,u,p,v,c;if("string"==typeof r)e=[r];else{if(!Array.isArray(r))throw new TypeError("unsupported trust argument");e=r.slice()}for(var h=0;h<e.length;h++)r=e[h],Object.prototype.hasOwnProperty.call(a,r)&&(r=a[r],e.splice.apply(e,[h,1].concat(r)),h+=r.length-1);return n=function(r){for(var e=new Array(r.length),n=0;n<r.length;n++)e[n]=l(r[n]);return e}(e),0===(t=n.length)?f:1===t?(d=n[0],u=d[0],p=u.kind(),v="ipv4"===p,c=d[1],function(r){if(!o(r))return!1;var e=s(r);if(e.kind()!==p){if(v&&!e.isIPv4MappedAddress())return!1;e=v?e.toIPv4Address():e.toIPv4MappedAddress()}return e.match(u,c)}):(i=n,function(r){if(!o(r))return!1;for(var e,n=s(r),t=n.kind(),d=0;d<i.length;d++){var a=i[d],u=a[0],p=u.kind(),l=a[1],f=n;if(t!==p){if("ipv4"===p&&!n.isIPv4MappedAddress())continue;e||(e="ipv4"===p?n.toIPv4Address():n.toIPv4MappedAddress()),f=e}if(f.match(u,l))return!0}return!1})}function l(r){var e=r.lastIndexOf("/"),n=-1!==e?r.substring(0,e):r;if(!o(n))throw new TypeError("invalid IP address: "+n);var t=s(n);-1===e&&"ipv6"===t.kind()&&t.isIPv4MappedAddress()&&(t=t.toIPv4Address());var i="ipv6"===t.kind()?128:32,a=-1!==e?r.substring(e+1,r.length):null;if((a=null===a?i:d.test(a)?parseInt(a,10):"ipv4"===t.kind()&&o(a)?function(r){var e=s(r),n=e.kind();return"ipv4"===n?e.prefixLengthFromSubnetMask():null}(a):null)<=0||a>i)throw new TypeError("invalid range on address: "+r);return[t,a]}function f(){return!1}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,