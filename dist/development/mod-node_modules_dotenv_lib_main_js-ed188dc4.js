exports.id="mod-node_modules_dotenv_lib_main_js-ed188dc4",exports.ids=["mod-node_modules_dotenv_lib_main_js-ed188dc4"],exports.modules={"./node_modules/dotenv/lib/main.js":(e,o,t)=>{const n=t("fs"),r=t("path"),s=t("os"),a=t("crypto"),c=t("./node_modules/dotenv/package.json").version,i=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function l(e){console.log(`[dotenv@${c}][DEBUG] ${e}`)}function p(){return process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function u(e,o){let t;try{t=new URL(o)}catch(e){if("ERR_INVALID_URL"===e.code)throw new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development");throw e}const n=t.password;if(!n)throw new Error("INVALID_DOTENV_KEY: Missing key part");const r=t.searchParams.get("environment");if(!r)throw new Error("INVALID_DOTENV_KEY: Missing environment part");const s=`DOTENV_VAULT_${r.toUpperCase()}`,a=e.parsed[s];if(!a)throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);return{ciphertext:a,key:n}}function d(e){let o=r.resolve(process.cwd(),".env");return e&&e.path&&e.path.length>0&&(o=e.path),o.endsWith(".vault")?o:`${o}.vault`}const f={configDotenv:function(e){let o=r.resolve(process.cwd(),".env"),t="utf8";const a=Boolean(e&&e.debug);var c;e&&(null!=e.path&&(o="~"===(c=e.path)[0]?r.join(s.homedir(),c.slice(1)):c),null!=e.encoding&&(t=e.encoding));try{const r=f.parse(n.readFileSync(o,{encoding:t}));return f.populate(process.env,r,e),{parsed:r}}catch(e){return a&&l(`Failed to load ${o} ${e.message}`),{error:e}}},_configVault:function(e){var o;o="Loading env from encrypted .env.vault",console.log(`[dotenv@${c}][INFO] ${o}`);const t=f._parseVault(e);return f.populate(process.env,t,e),{parsed:t}},_parseVault:function(e){const o=d(e),t=f.configDotenv({path:o});if(!t.parsed)throw new Error(`MISSING_DATA: Cannot parse ${o} for an unknown reason`);const n=p().split(","),r=n.length;let s;for(let e=0;e<r;e++)try{const o=u(t,n[e].trim());s=f.decrypt(o.ciphertext,o.key);break}catch(o){if(e+1>=r)throw o}return f.parse(s)},config:function(e){const o=d(e);return 0===p().length?f.configDotenv(e):n.existsSync(o)?f._configVault(e):(t=`You set DOTENV_KEY but you are missing a .env.vault file at ${o}. Did you forget to build it?`,console.log(`[dotenv@${c}][WARN] ${t}`),f.configDotenv(e));var t},decrypt:function(e,o){const t=Buffer.from(o.slice(-64),"hex");let n=Buffer.from(e,"base64");const r=n.slice(0,12),s=n.slice(-16);n=n.slice(12,-16);try{const e=a.createDecipheriv("aes-256-gcm",t,r);return e.setAuthTag(s),`${e.update(n)}${e.final()}`}catch(e){const o=e instanceof RangeError,t="Invalid key length"===e.message,n="Unsupported state or unable to authenticate data"===e.message;if(o||t){throw new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)")}if(n){throw new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY")}throw console.error("Error: ",e.code),console.error("Error: ",e.message),e}},parse:function(e){const o={};let t,n=e.toString();for(n=n.replace(/\r\n?/gm,"\n");null!=(t=i.exec(n));){const e=t[1];let n=t[2]||"";n=n.trim();const r=n[0];n=n.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===r&&(n=n.replace(/\\n/g,"\n"),n=n.replace(/\\r/g,"\r")),o[e]=n}return o},populate:function(e,o,t={}){const n=Boolean(t&&t.debug),r=Boolean(t&&t.override);if("object"!=typeof o)throw new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");for(const t of Object.keys(o))Object.prototype.hasOwnProperty.call(e,t)?(!0===r&&(e[t]=o[t]),n&&l(!0===r?`"${t}" is already defined and WAS overwritten`:`"${t}" is already defined and was NOT overwritten`)):e[t]=o[t]}};e.exports.configDotenv=f.configDotenv,e.exports._configVault=f._configVault,e.exports._parseVault=f._parseVault,e.exports.config=f.config,e.exports.decrypt=f.decrypt,e.exports.parse=f.parse,e.exports.populate=f.populate,e.exports=f}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,