"use strict";exports.id="mod-node_modules_express_lib_application_js-27a8b48c",exports.ids=["mod-node_modules_express_lib_application_js-27a8b48c"],exports.modules={"./node_modules/express/lib/application.js":(e,t,s)=>{var r=s("./node_modules/finalhandler/index.js"),i=s("./node_modules/express/lib/router/index.js"),n=s("./node_modules/methods/index.js"),o=s("./node_modules/express/lib/middleware/init.js"),a=s("./node_modules/express/lib/middleware/query.js"),u=s("./node_modules/debug/src/index.js")("express:application"),l=s("./node_modules/express/lib/view.js"),h=s("http"),c=s("./node_modules/express/lib/utils.js").compileETag,d=s("./node_modules/express/lib/utils.js").compileQueryParser,p=s("./node_modules/express/lib/utils.js").compileTrust,f=s("./node_modules/depd/index.js")("express"),g=s("./node_modules/array-flatten/array-flatten.js"),y=s("./node_modules/utils-merge/index.js"),m=s("path").resolve,b=s("./node_modules/setprototypeof/index.js"),v=Object.prototype.hasOwnProperty,_=Array.prototype.slice,x=e.exports={},w="@@symbol:trust_proxy_default";function j(e){"test"!==this.get("env")&&console.error(e.stack||e.toString())}x.init=function(){this.cache={},this.engines={},this.settings={},this.defaultConfiguration()},x.defaultConfiguration=function(){var e="development";this.enable("x-powered-by"),this.set("etag","weak"),this.set("env",e),this.set("query parser","extended"),this.set("subdomain offset",2),this.set("trust proxy",!1),Object.defineProperty(this.settings,w,{configurable:!0,value:!0}),u("booting in %s mode",e),this.on("mount",(function(e){!0===this.settings[w]&&"function"==typeof e.settings["trust proxy fn"]&&(delete this.settings["trust proxy"],delete this.settings["trust proxy fn"]),b(this.request,e.request),b(this.response,e.response),b(this.engines,e.engines),b(this.settings,e.settings)})),this.locals=Object.create(null),this.mountpath="/",this.locals.settings=this.settings,this.set("view",l),this.set("views",m("views")),this.set("jsonp callback name","callback"),Object.defineProperty(this,"router",{get:function(){throw new Error("'app.router' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.")}})},x.lazyrouter=function(){this._router||(this._router=new i({caseSensitive:this.enabled("case sensitive routing"),strict:this.enabled("strict routing")}),this._router.use(a(this.get("query parser fn"))),this._router.use(o.init(this)))},x.handle=function(e,t,s){var i=this._router,n=s||r(e,t,{env:this.get("env"),onerror:j.bind(this)});if(!i)return u("no routes defined on app"),void n();i.handle(e,t,n)},x.use=function(e){var t=0,s="/";if("function"!=typeof e){for(var r=e;Array.isArray(r)&&0!==r.length;)r=r[0];"function"!=typeof r&&(t=1,s=e)}var i=g(_.call(arguments,t));if(0===i.length)throw new TypeError("app.use() requires a middleware function");this.lazyrouter();var n=this._router;return i.forEach((function(e){if(!e||!e.handle||!e.set)return n.use(s,e);u(".use app under %s",s),e.mountpath=s,e.parent=this,n.use(s,(function(t,s,r){var i=t.app;e.handle(t,s,(function(e){b(t,i.request),b(s,i.response),r(e)}))})),e.emit("mount",this)}),this),this},x.route=function(e){return this.lazyrouter(),this._router.route(e)},x.engine=function(e,t){if("function"!=typeof t)throw new Error("callback function required");var s="."!==e[0]?"."+e:e;return this.engines[s]=t,this},x.param=function(e,t){if(this.lazyrouter(),Array.isArray(e)){for(var s=0;s<e.length;s++)this.param(e[s],t);return this}return this._router.param(e,t),this},x.set=function(e,t){if(1!==arguments.length){switch(u('set "%s" to %o',e,t),this.settings[e]=t,e){case"etag":this.set("etag fn",c(t));break;case"query parser":this.set("query parser fn",d(t));break;case"trust proxy":this.set("trust proxy fn",p(t)),Object.defineProperty(this.settings,w,{configurable:!0,value:!1})}return this}for(var s=this.settings;s&&s!==Object.prototype;){if(v.call(s,e))return s[e];s=Object.getPrototypeOf(s)}},x.path=function(){return this.parent?this.parent.path()+this.mountpath:""},x.enabled=function(e){return Boolean(this.set(e))},x.disabled=function(e){return!this.set(e)},x.enable=function(e){return this.set(e,!0)},x.disable=function(e){return this.set(e,!1)},n.forEach((function(e){x[e]=function(t){if("get"===e&&1===arguments.length)return this.set(t);this.lazyrouter();var s=this._router.route(t);return s[e].apply(s,_.call(arguments,1)),this}})),x.all=function(e){this.lazyrouter();for(var t=this._router.route(e),s=_.call(arguments,1),r=0;r<n.length;r++)t[n[r]].apply(t,s);return this},x.del=f.function(x.delete,"app.del: Use app.delete instead"),x.render=function(e,t,s){var r,i=this.cache,n=s,o=this.engines,a=t,u={};if("function"==typeof t&&(n=t,a={}),y(u,this.locals),a._locals&&y(u,a._locals),y(u,a),null==u.cache&&(u.cache=this.enabled("view cache")),u.cache&&(r=i[e]),!r){if(!(r=new(this.get("view"))(e,{defaultEngine:this.get("view engine"),root:this.get("views"),engines:o})).path){var l=Array.isArray(r.root)&&r.root.length>1?'directories "'+r.root.slice(0,-1).join('", "')+'" or "'+r.root[r.root.length-1]+'"':'directory "'+r.root+'"',h=new Error('Failed to lookup view "'+e+'" in views '+l);return h.view=r,n(h)}u.cache&&(i[e]=r)}!function(e,t,s){try{e.render(t,s)}catch(e){s(e)}}(r,u,n)},x.listen=function(){var e=h.createServer(this);return e.listen.apply(e,arguments)}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,