"use strict";exports.id="mod-node_modules_express_lib_router_index_js-cf34ebef",exports.ids=["mod-node_modules_express_lib_router_index_js-cf34ebef"],exports.modules={"./node_modules/express/lib/router/index.js":(e,r,t)=>{var n=t("./node_modules/express/lib/router/route.js"),s=t("./node_modules/express/lib/router/layer.js"),a=t("./node_modules/methods/index.js"),i=t("./node_modules/utils-merge/index.js"),o=t("./node_modules/debug/src/index.js")("express:router"),u=t("./node_modules/depd/index.js")("express"),l=t("./node_modules/array-flatten/array-flatten.js"),f=t("./node_modules/parseurl/index.js"),c=t("./node_modules/setprototypeof/index.js"),d=/^\[object (\S+)\]$/,h=Array.prototype.slice,p=Object.prototype.toString,m=e.exports=function(e){var r=e||{};function t(e,r,n){t.handle(e,r,n)}return c(t,m),t.params={},t._params=[],t.caseSensitive=r.caseSensitive,t.mergeParams=r.mergeParams,t.strict=r.strict,t.stack=[],t};function v(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}function g(e){var r=typeof e;return"object"!==r?r:p.call(e).replace(d,"$1")}function y(e,r){try{return e.match(r)}catch(e){return e}}m.param=function(e,r){if("function"==typeof e)return u("router.param(fn): Refactor to use path params"),void this._params.push(e);var t,n=this._params,s=n.length;":"===e[0]&&(u("router.param("+JSON.stringify(e)+", fn): Use router.param("+JSON.stringify(e.slice(1))+", fn) instead"),e=e.slice(1));for(var a=0;a<s;++a)(t=n[a](e,r))&&(r=t);if("function"!=typeof r)throw new Error("invalid param() call for "+e+", got "+r);return(this.params[e]=this.params[e]||[]).push(r),this},m.handle=function(e,r,t){var n=this;o("dispatching %s %s",e.method,e.url);var s,a,u=0,l=function(e){if("string"!=typeof e||0===e.length||"/"===e[0])return;var r=e.indexOf("?"),t=-1!==r?r:e.length,n=e.slice(0,t).indexOf("://");return-1!==n?e.substring(0,e.indexOf("/",3+n)):void 0}(e.url)||"",c="",d=!1,h=0,p={},m=[],g=n.stack,_=e.params,x=e.baseUrl||"",b=function(e,r){for(var t=new Array(arguments.length-2),n=new Array(arguments.length-2),s=0;s<t.length;s++)t[s]=arguments[s+2],n[s]=r[t[s]];return function(){for(var s=0;s<t.length;s++)r[t[s]]=n[s];return e.apply(this,arguments)}}(t,e,"baseUrl","next","params");function j(t){var s="route"===t?null:t;if(d&&(e.url=e.url.slice(1),d=!1),0!==c.length&&(e.baseUrl=x,e.url=l+c+e.url.slice(l.length),c=""),"router"!==s)if(u>=g.length)setImmediate(b,s);else{if(++h>100)return setImmediate(j,t);var a,w,O,S=function(e){try{return f(e).pathname}catch(e){return}}(e);if(null==S)return b(s);for(;!0!==w&&u<g.length;)if(w=y(a=g[u++],S),O=a.route,"boolean"!=typeof w&&(s=s||w),!0===w&&O)if(s)w=!1;else{var U=e.method,A=O._handles_method(U);A||"OPTIONS"!==U||v(m,O._options()),A||"HEAD"===U||(w=!1)}if(!0!==w)return b(s);O&&(e.route=O),e.params=n.mergeParams?function(e,r){if("object"!=typeof r||!r)return e;var t=i({},r);if(!(0 in e)||!(0 in r))return i(t,e);var n=0,s=0;for(;n in e;)n++;for(;s in r;)s++;for(n--;n>=0;n--)e[n+s]=e[n],n<s&&delete e[n];return i(t,e)}(a.params,_):a.params;var k=a.path;n.process_params(a,p,e,r,(function(t){t?j(s||t):O?a.handle_request(e,r,j):function(t,n,s,a){if(0!==s.length){if(s!==a.slice(0,s.length))return void j(n);var i=a[s.length];if(i&&"/"!==i&&"."!==i)return j(n);o("trim prefix (%s) from url %s",s,e.url),c=s,e.url=l+e.url.slice(l.length+c.length),l||"/"===e.url[0]||(e.url="/"+e.url,d=!0),e.baseUrl=x+("/"===c[c.length-1]?c.substring(0,c.length-1):c)}o("%s %s : %s",t.name,s,e.originalUrl),n?t.handle_error(n,e,r,j):t.handle_request(e,r,j)}(a,s,k,S),h=0}))}else setImmediate(b,null)}e.next=j,"OPTIONS"===e.method&&(s=b,a=function(e,t){if(t||0===m.length)return e(t);!function(e,r,t){try{var n=r.join(",");e.set("Allow",n),e.send(n)}catch(e){t(e)}}(r,m,e)},b=function(){var e=new Array(arguments.length+1);e[0]=s;for(var r=0,t=arguments.length;r<t;r++)e[r+1]=arguments[r];a.apply(this,e)}),e.baseUrl=x,e.originalUrl=e.originalUrl||e.url,j()},m.process_params=function(e,r,t,n,s){var a=this.params,i=e.keys;if(!i||0===i.length)return s();var o,u,l,f,c,d=0,h=0;function p(e){return e?s(e):d>=i.length?s():(h=0,u=i[d++],o=u.name,l=t.params[o],f=a[o],c=r[o],void 0!==l&&f?c&&(c.match===l||c.error&&"route"!==c.error)?(t.params[o]=c.value,p(c.error)):(r[o]=c={error:null,match:l,value:l},void m()):p())}function m(e){var r=f[h++];if(c.value=t.params[u.name],e)return c.error=e,void p(e);if(!r)return p();try{r(t,n,m,l,u.name)}catch(e){m(e)}}p()},m.use=function(e){var r=0,t="/";if("function"!=typeof e){for(var n=e;Array.isArray(n)&&0!==n.length;)n=n[0];"function"!=typeof n&&(r=1,t=e)}var a=l(h.call(arguments,r));if(0===a.length)throw new TypeError("Router.use() requires a middleware function");for(var i=0;i<a.length;i++){if("function"!=typeof(e=a[i]))throw new TypeError("Router.use() requires a middleware function but got a "+g(e));o("use %o %s",t,e.name||"<anonymous>");var u=new s(t,{sensitive:this.caseSensitive,strict:!1,end:!1},e);u.route=void 0,this.stack.push(u)}return this},m.route=function(e){var r=new n(e),t=new s(e,{sensitive:this.caseSensitive,strict:this.strict,end:!0},r.dispatch.bind(r));return t.route=r,this.stack.push(t),r},a.concat("all").forEach((function(e){m[e]=function(r){var t=this.route(r);return t[e].apply(t,h.call(arguments,1)),this}}))}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,