exports.id="mod-node_modules_debug_src_node_js-6126290b",exports.ids=["mod-node_modules_debug_src_node_js-6126290b"],exports.modules={"./node_modules/debug/src/node.js":(e,t,s)=>{var n=s("tty"),r=s("util");(t=e.exports=s("./node_modules/debug/src/debug.js")).init=function(e){e.inspectOpts={};for(var s=Object.keys(t.inspectOpts),n=0;n<s.length;n++)e.inspectOpts[s[n]]=t.inspectOpts[s[n]]},t.log=function(){return i.write(r.format.apply(r,arguments)+"\n")},t.formatArgs=function(e){var s=this.namespace,n=this.useColors;if(n){var r=this.color,o="  [3"+r+";1m"+s+" [0m";e[0]=o+e[0].split("\n").join("\n"+o),e.push("[3"+r+"m+"+t.humanize(this.diff)+"[0m")}else e[0]=(new Date).toUTCString()+" "+s+" "+e[0]},t.save=function(e){null==e?delete process.env.DEBUG:process.env.DEBUG=e},t.load=u,t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):n.isatty(o)},t.colors=[6,2,3,4,5,1],t.inspectOpts=Object.keys(process.env).filter((function(e){return/^debug_/i.test(e)})).reduce((function(e,t){var s=t.substring(6).toLowerCase().replace(/_([a-z])/g,(function(e,t){return t.toUpperCase()})),n=process.env[t];return n=!!/^(yes|on|true|enabled)$/i.test(n)||!/^(no|off|false|disabled)$/i.test(n)&&("null"===n?null:Number(n)),e[s]=n,e}),{});var o=parseInt(process.env.DEBUG_FD,10)||2;1!==o&&2!==o&&r.deprecate((function(){}),"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();var i=1===o?process.stdout:2===o?process.stderr:function(e){var t;switch(process.binding("tty_wrap").guessHandleType(e)){case"TTY":(t=new n.WriteStream(e))._type="tty",t._handle&&t._handle.unref&&t._handle.unref();break;case"FILE":(t=new(s("fs").SyncWriteStream)(e,{autoClose:!1}))._type="fs";break;case"PIPE":case"TCP":(t=new(s("net").Socket)({fd:e,readable:!1,writable:!0})).readable=!1,t.read=null,t._type="pipe",t._handle&&t._handle.unref&&t._handle.unref();break;default:throw new Error("Implement me. Unknown stream file type!")}return t.fd=e,t._isStdio=!0,t}(o);function u(){return process.env.DEBUG}t.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts).split("\n").map((function(e){return e.trim()})).join(" ")},t.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts)},t.enable(u())}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLW5vZGVfbW9kdWxlc19kZWJ1Z19zcmNfbm9kZV9qcy02MTI2MjkwYi5qcyIsIm1hcHBpbmdzIjoibUxBSUEsSUFBSUEsRUFBTSxFQUFRLE9BQ2RDLEVBQU8sRUFBUSxTQVFuQkMsRUFBVUMsRUFBT0QsUUFBVSxFQUFqQixzQ0FDRkUsS0E0TlIsU0FBZUMsR0FDYkEsRUFBTUMsWUFBYyxDQUFDLEVBR3JCLElBREEsSUFBSUMsRUFBT0MsT0FBT0QsS0FBS0wsRUFBUUksYUFDdEJHLEVBQUksRUFBR0EsRUFBSUYsRUFBS0csT0FBUUQsSUFDL0JKLEVBQU1DLFlBQVlDLEVBQUtFLElBQU1QLEVBQVFJLFlBQVlDLEVBQUtFLEdBRTFELEVBbE9BUCxFQUFRUyxJQWdIUixXQUNFLE9BQU9DLEVBQU9DLE1BQU1aLEVBQUthLE9BQU9DLE1BQU1kLEVBQU1lLFdBQWEsS0FDM0QsRUFqSEFkLEVBQVFlLFdBMkZSLFNBQW9CQyxHQUNsQixJQUFJQyxFQUFPQyxLQUFLQyxVQUNaQyxFQUFZRixLQUFLRSxVQUVyQixHQUFJQSxFQUFXLENBQ2IsSUFBSUMsRUFBSUgsS0FBS0ksTUFDVEMsRUFBUyxRQUFlRixFQUFJLE1BQVFKLEVBQTNCLFFBRWJELEVBQUssR0FBS08sRUFBU1AsRUFBSyxHQUFHUSxNQUFNLE1BQU1DLEtBQUssS0FBT0YsR0FDbkRQLEVBQUtVLEtBQUssTUFBYUwsRUFBSSxLQUFPckIsRUFBUTJCLFNBQVNULEtBQUtVLE1BQVEsT0FDbEUsTUFDRVosRUFBSyxJQUFLLElBQUlhLE1BQU9DLGNBQ2pCLElBQU1iLEVBQU8sSUFBTUQsRUFBSyxFQUVoQyxFQXhHQWhCLEVBQVErQixLQXlIUixTQUFjQyxHQUNSLE1BQVFBLFNBR0hDLFFBQVFDLElBQUlDLE1BRW5CRixRQUFRQyxJQUFJQyxNQUFRSCxDQUV4QixFQWhJQWhDLEVBQVFvQyxLQUFPQSxFQUNmcEMsRUFBUW9CLFVBdURSLFdBQ0UsTUFBTyxXQUFZcEIsRUFBUUksWUFDdkJpQyxRQUFRckMsRUFBUUksWUFBWWtDLFFBQzVCeEMsRUFBSXlDLE9BQU9DLEVBQ2pCLEVBckRBeEMsRUFBUXNDLE9BQVMsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FRakN0QyxFQUFRSSxZQUFjRSxPQUFPRCxLQUFLNEIsUUFBUUMsS0FBS08sUUFBTyxTQUFVQyxHQUM5RCxNQUFPLFdBQVdDLEtBQUtELEVBQ3pCLElBQUdFLFFBQU8sU0FBVUMsRUFBS0gsR0FFdkIsSUFBSUksRUFBT0osRUFDUkssVUFBVSxHQUNWQyxjQUNBQyxRQUFRLGFBQWEsU0FBVUMsRUFBR0MsR0FBSyxPQUFPQSxFQUFFQyxhQUFjLElBRzdEQyxFQUFNcEIsUUFBUUMsSUFBSVEsR0FPdEIsT0FOMENXLElBQXRDLDJCQUEyQlYsS0FBS1UsS0FDM0IsNkJBQTZCVixLQUFLVSxLQUMxQixTQUFSQSxFQUFzQixLQUNwQkMsT0FBT0QsSUFFbEJSLEVBQUlDLEdBQVFPLEVBQ0xSLENBQ1QsR0FBRyxDQUFDLEdBU0osSUFBSUwsRUFBS2UsU0FBU3RCLFFBQVFDLElBQUlzQixTQUFVLEtBQU8sRUFFM0MsSUFBTWhCLEdBQU0sSUFBTUEsR0FDcEJ6QyxFQUFLMEQsV0FBVSxXQUFXLEdBQUcsMEtBQTdCMUQsR0FHRixJQUFJVyxFQUFTLElBQU04QixFQUFLUCxRQUFReUIsT0FDbkIsSUFBTWxCLEVBQUtQLFFBQVEwQixPQW1HaEMsU0FBb0NuQixHQUNsQyxJQUFJOUIsRUFLSixPQUpldUIsUUFBUTJCLFFBQVEsWUFJZEMsZ0JBQWdCckIsSUFDL0IsSUFBSyxPQUNIOUIsRUFBUyxJQUFJWixFQUFJZ0UsWUFBWXRCLElBQ3RCdUIsTUFBUSxNQUlYckQsRUFBT3NELFNBQVd0RCxFQUFPc0QsUUFBUUMsT0FDbkN2RCxFQUFPc0QsUUFBUUMsUUFFakIsTUFFRixJQUFLLFFBRUh2RCxFQUFTLElBREEsRUFBUSxNQUNEd0QsaUJBQWdCMUIsRUFBSSxDQUFFMkIsV0FBVyxLQUMxQ0osTUFBUSxLQUNmLE1BRUYsSUFBSyxPQUNMLElBQUssT0FFSHJELEVBQVMsSUFEQyxFQUFRLE9BQ0QwRCxRQUFPLENBQ3RCNUIsR0FBSUEsRUFDSjZCLFVBQVUsRUFDVkMsVUFBVSxLQU9MRCxVQUFXLEVBQ2xCM0QsRUFBTzZELEtBQU8sS0FDZDdELEVBQU9xRCxNQUFRLE9BSVhyRCxFQUFPc0QsU0FBV3RELEVBQU9zRCxRQUFRQyxPQUNuQ3ZELEVBQU9zRCxRQUFRQyxRQUVqQixNQUVGLFFBRUUsTUFBTSxJQUFJTyxNQUFNLDJDQVFwQixPQUpBOUQsRUFBTzhCLEdBQUtBLEVBRVo5QixFQUFPK0QsVUFBVyxFQUVYL0QsQ0FDVCxDQTdKYWdFLENBQTBCbEMsR0F1RnZDLFNBQVNKLElBQ1AsT0FBT0gsUUFBUUMsSUFBSUMsS0FDckIsQ0F6RUFuQyxFQUFRMkUsV0FBV0MsRUFBSSxTQUFTQyxHQUU5QixPQURBM0QsS0FBS2QsWUFBWWtDLE9BQVNwQixLQUFLRSxVQUN4QnJCLEVBQUsrRSxRQUFRRCxFQUFHM0QsS0FBS2QsYUFDekJvQixNQUFNLE1BQU11RCxLQUFJLFNBQVNDLEdBQ3hCLE9BQU9BLEVBQUlDLE1BQ2IsSUFBR3hELEtBQUssSUFDWixFQU1BekIsRUFBUTJFLFdBQVdPLEVBQUksU0FBU0wsR0FFOUIsT0FEQTNELEtBQUtkLFlBQVlrQyxPQUFTcEIsS0FBS0UsVUFDeEJyQixFQUFLK0UsUUFBUUQsRUFBRzNELEtBQUtkLFlBQzlCLEVBb0pBSixFQUFRbUYsT0FBTy9DLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYmR4eWd5L2V4cHJlc3Mtd2VicGFjay8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHR0eSA9IHJlcXVpcmUoJ3R0eScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgTm9kZS5qcyBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFs2LCAyLCAzLCA0LCA1LCAxXTtcblxuLyoqXG4gKiBCdWlsZCB1cCB0aGUgZGVmYXVsdCBgaW5zcGVjdE9wdHNgIG9iamVjdCBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKlxuICogICAkIERFQlVHX0NPTE9SUz1ubyBERUJVR19ERVBUSD0xMCBERUJVR19TSE9XX0hJRERFTj1lbmFibGVkIG5vZGUgc2NyaXB0LmpzXG4gKi9cblxuZXhwb3J0cy5pbnNwZWN0T3B0cyA9IE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gL15kZWJ1Z18vaS50ZXN0KGtleSk7XG59KS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gIC8vIGNhbWVsLWNhc2VcbiAgdmFyIHByb3AgPSBrZXlcbiAgICAuc3Vic3RyaW5nKDYpXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAucmVwbGFjZSgvXyhbYS16XSkvZywgZnVuY3Rpb24gKF8sIGspIHsgcmV0dXJuIGsudG9VcHBlckNhc2UoKSB9KTtcblxuICAvLyBjb2VyY2Ugc3RyaW5nIHZhbHVlIGludG8gSlMgdmFsdWVcbiAgdmFyIHZhbCA9IHByb2Nlc3MuZW52W2tleV07XG4gIGlmICgvXih5ZXN8b258dHJ1ZXxlbmFibGVkKSQvaS50ZXN0KHZhbCkpIHZhbCA9IHRydWU7XG4gIGVsc2UgaWYgKC9eKG5vfG9mZnxmYWxzZXxkaXNhYmxlZCkkL2kudGVzdCh2YWwpKSB2YWwgPSBmYWxzZTtcbiAgZWxzZSBpZiAodmFsID09PSAnbnVsbCcpIHZhbCA9IG51bGw7XG4gIGVsc2UgdmFsID0gTnVtYmVyKHZhbCk7XG5cbiAgb2JqW3Byb3BdID0gdmFsO1xuICByZXR1cm4gb2JqO1xufSwge30pO1xuXG4vKipcbiAqIFRoZSBmaWxlIGRlc2NyaXB0b3IgdG8gd3JpdGUgdGhlIGBkZWJ1ZygpYCBjYWxscyB0by5cbiAqIFNldCB0aGUgYERFQlVHX0ZEYCBlbnYgdmFyaWFibGUgdG8gb3ZlcnJpZGUgd2l0aCBhbm90aGVyIHZhbHVlLiBpLmUuOlxuICpcbiAqICAgJCBERUJVR19GRD0zIG5vZGUgc2NyaXB0LmpzIDM+ZGVidWcubG9nXG4gKi9cblxudmFyIGZkID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuREVCVUdfRkQsIDEwKSB8fCAyO1xuXG5pZiAoMSAhPT0gZmQgJiYgMiAhPT0gZmQpIHtcbiAgdXRpbC5kZXByZWNhdGUoZnVuY3Rpb24oKXt9LCAnZXhjZXB0IGZvciBzdGRlcnIoMikgYW5kIHN0ZG91dCgxKSwgYW55IG90aGVyIHVzYWdlIG9mIERFQlVHX0ZEIGlzIGRlcHJlY2F0ZWQuIE92ZXJyaWRlIGRlYnVnLmxvZyBpZiB5b3Ugd2FudCB0byB1c2UgYSBkaWZmZXJlbnQgbG9nIGZ1bmN0aW9uIChodHRwczovL2dpdC5pby9kZWJ1Z19mZCknKSgpXG59XG5cbnZhciBzdHJlYW0gPSAxID09PSBmZCA/IHByb2Nlc3Muc3Rkb3V0IDpcbiAgICAgICAgICAgICAyID09PSBmZCA/IHByb2Nlc3Muc3RkZXJyIDpcbiAgICAgICAgICAgICBjcmVhdGVXcml0YWJsZVN0ZGlvU3RyZWFtKGZkKTtcblxuLyoqXG4gKiBJcyBzdGRvdXQgYSBUVFk/IENvbG9yZWQgb3V0cHV0IGlzIGVuYWJsZWQgd2hlbiBgdHJ1ZWAuXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICByZXR1cm4gJ2NvbG9ycycgaW4gZXhwb3J0cy5pbnNwZWN0T3B0c1xuICAgID8gQm9vbGVhbihleHBvcnRzLmluc3BlY3RPcHRzLmNvbG9ycylcbiAgICA6IHR0eS5pc2F0dHkoZmQpO1xufVxuXG4vKipcbiAqIE1hcCAlbyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGwgb24gYSBzaW5nbGUgbGluZS5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMubyA9IGZ1bmN0aW9uKHYpIHtcbiAgdGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcbiAgcmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKVxuICAgIC5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKHN0cikge1xuICAgICAgcmV0dXJuIHN0ci50cmltKClcbiAgICB9KS5qb2luKCcgJyk7XG59O1xuXG4vKipcbiAqIE1hcCAlbyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGxvd2luZyBtdWx0aXBsZSBsaW5lcyBpZiBuZWVkZWQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLk8gPSBmdW5jdGlvbih2KSB7XG4gIHRoaXMuaW5zcGVjdE9wdHMuY29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG4gIHJldHVybiB1dGlsLmluc3BlY3QodiwgdGhpcy5pbnNwZWN0T3B0cyk7XG59O1xuXG4vKipcbiAqIEFkZHMgQU5TSSBjb2xvciBlc2NhcGUgY29kZXMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgbmFtZSA9IHRoaXMubmFtZXNwYWNlO1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgaWYgKHVzZUNvbG9ycykge1xuICAgIHZhciBjID0gdGhpcy5jb2xvcjtcbiAgICB2YXIgcHJlZml4ID0gJyAgXFx1MDAxYlszJyArIGMgKyAnOzFtJyArIG5hbWUgKyAnICcgKyAnXFx1MDAxYlswbSc7XG5cbiAgICBhcmdzWzBdID0gcHJlZml4ICsgYXJnc1swXS5zcGxpdCgnXFxuJykuam9pbignXFxuJyArIHByZWZpeCk7XG4gICAgYXJncy5wdXNoKCdcXHUwMDFiWzMnICsgYyArICdtKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZikgKyAnXFx1MDAxYlswbScpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3NbMF0gPSBuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKClcbiAgICAgICsgJyAnICsgbmFtZSArICcgJyArIGFyZ3NbMF07XG4gIH1cbn1cblxuLyoqXG4gKiBJbnZva2VzIGB1dGlsLmZvcm1hdCgpYCB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzIGFuZCB3cml0ZXMgdG8gYHN0cmVhbWAuXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICByZXR1cm4gc3RyZWFtLndyaXRlKHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIGFyZ3VtZW50cykgKyAnXFxuJyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgLy8gSWYgeW91IHNldCBhIHByb2Nlc3MuZW52IGZpZWxkIHRvIG51bGwgb3IgdW5kZWZpbmVkLCBpdCBnZXRzIGNhc3QgdG8gdGhlXG4gICAgLy8gc3RyaW5nICdudWxsJyBvciAndW5kZWZpbmVkJy4gSnVzdCBkZWxldGUgaW5zdGVhZC5cbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH0gZWxzZSB7XG4gICAgcHJvY2Vzcy5lbnYuREVCVUcgPSBuYW1lc3BhY2VzO1xuICB9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52LkRFQlVHO1xufVxuXG4vKipcbiAqIENvcGllZCBmcm9tIGBub2RlL3NyYy9ub2RlLmpzYC5cbiAqXG4gKiBYWFg6IEl0J3MgbGFtZSB0aGF0IG5vZGUgZG9lc24ndCBleHBvc2UgdGhpcyBBUEkgb3V0LW9mLXRoZS1ib3guIEl0IGFsc29cbiAqIHJlbGllcyBvbiB0aGUgdW5kb2N1bWVudGVkIGB0dHlfd3JhcC5ndWVzc0hhbmRsZVR5cGUoKWAgd2hpY2ggaXMgYWxzbyBsYW1lLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVdyaXRhYmxlU3RkaW9TdHJlYW0gKGZkKSB7XG4gIHZhciBzdHJlYW07XG4gIHZhciB0dHlfd3JhcCA9IHByb2Nlc3MuYmluZGluZygndHR5X3dyYXAnKTtcblxuICAvLyBOb3RlIHN0cmVhbS5fdHlwZSBpcyB1c2VkIGZvciB0ZXN0LW1vZHVsZS1sb2FkLWxpc3QuanNcblxuICBzd2l0Y2ggKHR0eV93cmFwLmd1ZXNzSGFuZGxlVHlwZShmZCkpIHtcbiAgICBjYXNlICdUVFknOlxuICAgICAgc3RyZWFtID0gbmV3IHR0eS5Xcml0ZVN0cmVhbShmZCk7XG4gICAgICBzdHJlYW0uX3R5cGUgPSAndHR5JztcblxuICAgICAgLy8gSGFjayB0byBoYXZlIHN0cmVhbSBub3Qga2VlcCB0aGUgZXZlbnQgbG9vcCBhbGl2ZS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MjZcbiAgICAgIGlmIChzdHJlYW0uX2hhbmRsZSAmJiBzdHJlYW0uX2hhbmRsZS51bnJlZikge1xuICAgICAgICBzdHJlYW0uX2hhbmRsZS51bnJlZigpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdGSUxFJzpcbiAgICAgIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgICBzdHJlYW0gPSBuZXcgZnMuU3luY1dyaXRlU3RyZWFtKGZkLCB7IGF1dG9DbG9zZTogZmFsc2UgfSk7XG4gICAgICBzdHJlYW0uX3R5cGUgPSAnZnMnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQSVBFJzpcbiAgICBjYXNlICdUQ1AnOlxuICAgICAgdmFyIG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuICAgICAgc3RyZWFtID0gbmV3IG5ldC5Tb2NrZXQoe1xuICAgICAgICBmZDogZmQsXG4gICAgICAgIHJlYWRhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICAvLyBGSVhNRSBTaG91bGQgcHJvYmFibHkgaGF2ZSBhbiBvcHRpb24gaW4gbmV0LlNvY2tldCB0byBjcmVhdGUgYVxuICAgICAgLy8gc3RyZWFtIGZyb20gYW4gZXhpc3RpbmcgZmQgd2hpY2ggaXMgd3JpdGFibGUgb25seS4gQnV0IGZvciBub3dcbiAgICAgIC8vIHdlJ2xsIGp1c3QgYWRkIHRoaXMgaGFjayBhbmQgc2V0IHRoZSBgcmVhZGFibGVgIG1lbWJlciB0byBmYWxzZS5cbiAgICAgIC8vIFRlc3Q6IC4vbm9kZSB0ZXN0L2ZpeHR1cmVzL2VjaG8uanMgPCAvZXRjL3Bhc3N3ZFxuICAgICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVhZCA9IG51bGw7XG4gICAgICBzdHJlYW0uX3R5cGUgPSAncGlwZSc7XG5cbiAgICAgIC8vIEZJWE1FIEhhY2sgdG8gaGF2ZSBzdHJlYW0gbm90IGtlZXAgdGhlIGV2ZW50IGxvb3AgYWxpdmUuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzI2XG4gICAgICBpZiAoc3RyZWFtLl9oYW5kbGUgJiYgc3RyZWFtLl9oYW5kbGUudW5yZWYpIHtcbiAgICAgICAgc3RyZWFtLl9oYW5kbGUudW5yZWYoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIFByb2JhYmx5IGFuIGVycm9yIG9uIGluIHV2X2d1ZXNzX2hhbmRsZSgpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltcGxlbWVudCBtZS4gVW5rbm93biBzdHJlYW0gZmlsZSB0eXBlIScpO1xuICB9XG5cbiAgLy8gRm9yIHN1cHBvcnRpbmcgbGVnYWN5IEFQSSB3ZSBwdXQgdGhlIEZEIGhlcmUuXG4gIHN0cmVhbS5mZCA9IGZkO1xuXG4gIHN0cmVhbS5faXNTdGRpbyA9IHRydWU7XG5cbiAgcmV0dXJuIHN0cmVhbTtcbn1cblxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBpbml0IChkZWJ1Zykge1xuICBkZWJ1Zy5pbnNwZWN0T3B0cyA9IHt9O1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXhwb3J0cy5pbnNwZWN0T3B0cyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlYnVnLmluc3BlY3RPcHRzW2tleXNbaV1dID0gZXhwb3J0cy5pbnNwZWN0T3B0c1trZXlzW2ldXTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgcHJvY2Vzcy5lbnYuREVCVUdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuIl0sIm5hbWVzIjpbInR0eSIsInV0aWwiLCJleHBvcnRzIiwibW9kdWxlIiwiaW5pdCIsImRlYnVnIiwiaW5zcGVjdE9wdHMiLCJrZXlzIiwiT2JqZWN0IiwiaSIsImxlbmd0aCIsImxvZyIsInN0cmVhbSIsIndyaXRlIiwiZm9ybWF0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmb3JtYXRBcmdzIiwiYXJncyIsIm5hbWUiLCJ0aGlzIiwibmFtZXNwYWNlIiwidXNlQ29sb3JzIiwiYyIsImNvbG9yIiwicHJlZml4Iiwic3BsaXQiLCJqb2luIiwicHVzaCIsImh1bWFuaXplIiwiZGlmZiIsIkRhdGUiLCJ0b1VUQ1N0cmluZyIsInNhdmUiLCJuYW1lc3BhY2VzIiwicHJvY2VzcyIsImVudiIsIkRFQlVHIiwibG9hZCIsIkJvb2xlYW4iLCJjb2xvcnMiLCJpc2F0dHkiLCJmZCIsImZpbHRlciIsImtleSIsInRlc3QiLCJyZWR1Y2UiLCJvYmoiLCJwcm9wIiwic3Vic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiXyIsImsiLCJ0b1VwcGVyQ2FzZSIsInZhbCIsIk51bWJlciIsInBhcnNlSW50IiwiREVCVUdfRkQiLCJkZXByZWNhdGUiLCJzdGRvdXQiLCJzdGRlcnIiLCJiaW5kaW5nIiwiZ3Vlc3NIYW5kbGVUeXBlIiwiV3JpdGVTdHJlYW0iLCJfdHlwZSIsIl9oYW5kbGUiLCJ1bnJlZiIsIlN5bmNXcml0ZVN0cmVhbSIsImF1dG9DbG9zZSIsIlNvY2tldCIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJyZWFkIiwiRXJyb3IiLCJfaXNTdGRpbyIsImNyZWF0ZVdyaXRhYmxlU3RkaW9TdHJlYW0iLCJmb3JtYXR0ZXJzIiwibyIsInYiLCJpbnNwZWN0IiwibWFwIiwic3RyIiwidHJpbSIsIk8iLCJlbmFibGUiXSwic291cmNlUm9vdCI6IiJ9