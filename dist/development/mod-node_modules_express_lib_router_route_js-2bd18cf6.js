"use strict";exports.id="mod-node_modules_express_lib_router_route_js-2bd18cf6",exports.ids=["mod-node_modules_express_lib_router_route_js-2bd18cf6"],exports.modules={"./node_modules/express/lib/router/route.js":(t,e,o)=>{var r=o("./node_modules/debug/src/index.js")("express:router:route"),s=o("./node_modules/array-flatten/array-flatten.js"),a=o("./node_modules/express/lib/router/layer.js"),h=o("./node_modules/methods/index.js"),n=Array.prototype.slice,i=Object.prototype.toString;function u(t){this.path=t,this.stack=[],r("new %o",t),this.methods={}}t.exports=u,u.prototype._handles_method=function(t){if(this.methods._all)return!0;var e=t.toLowerCase();return"head"!==e||this.methods.head||(e="get"),Boolean(this.methods[e])},u.prototype._options=function(){var t=Object.keys(this.methods);this.methods.get&&!this.methods.head&&t.push("head");for(var e=0;e<t.length;e++)t[e]=t[e].toUpperCase();return t},u.prototype.dispatch=function(t,e,o){var r=0,s=this.stack,a=0;if(0===s.length)return o();var h=t.method.toLowerCase();"head"!==h||this.methods.head||(h="get"),t.route=this,function n(i){if(i&&"route"===i)return o();if(i&&"router"===i)return o(i);if(++a>100)return setImmediate(n,i);var u=s[r++];if(!u)return o(i);u.method&&u.method!==h?n(i):i?u.handle_error(i,t,e,n):u.handle_request(t,e,n);a=0}()},u.prototype.all=function(){for(var t=s(n.call(arguments)),e=0;e<t.length;e++){var o=t[e];if("function"!=typeof o){var r=i.call(o);throw new TypeError("Route.all() requires a callback function but got a "+r)}var h=a("/",{},o);h.method=void 0,this.methods._all=!0,this.stack.push(h)}return this},h.forEach((function(t){u.prototype[t]=function(){for(var e=s(n.call(arguments)),o=0;o<e.length;o++){var h=e[o];if("function"!=typeof h){var u=i.call(h);throw new Error("Route."+t+"() requires a callback function but got a "+u)}r("%s %o",t,this.path);var d=a("/",{},h);d.method=t,this.methods[t]=!0,this.stack.push(d)}return this}}))}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,