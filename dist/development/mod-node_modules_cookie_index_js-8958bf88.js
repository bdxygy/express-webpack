"use strict";exports.id="mod-node_modules_cookie_index_js-8958bf88",exports.ids=["mod-node_modules_cookie_index_js-8958bf88"],exports.modules={"./node_modules/cookie/index.js":(e,i)=>{i.parse=function(e,i){if("string"!=typeof e)throw new TypeError("argument str must be a string");var r={},t=(i||{}).decode||o,n=0;for(;n<e.length;){var s=e.indexOf("=",n);if(-1===s)break;var d=e.indexOf(";",n);if(-1===d)d=e.length;else if(d<s){n=e.lastIndexOf(";",s-1)+1;continue}var p=e.slice(n,s).trim();if(void 0===r[p]){var f=e.slice(s+1,d).trim();34===f.charCodeAt(0)&&(f=f.slice(1,-1)),r[p]=a(f,t)}n=d+1}return r},i.serialize=function(e,i,o){var a=o||{},s=a.encode||n;if("function"!=typeof s)throw new TypeError("option encode is invalid");if(!t.test(e))throw new TypeError("argument name is invalid");var d=s(i);if(d&&!t.test(d))throw new TypeError("argument val is invalid");var p=e+"="+d;if(null!=a.maxAge){var f=a.maxAge-0;if(isNaN(f)||!isFinite(f))throw new TypeError("option maxAge is invalid");p+="; Max-Age="+Math.floor(f)}if(a.domain){if(!t.test(a.domain))throw new TypeError("option domain is invalid");p+="; Domain="+a.domain}if(a.path){if(!t.test(a.path))throw new TypeError("option path is invalid");p+="; Path="+a.path}if(a.expires){var c=a.expires;if(!function(e){return"[object Date]"===r.call(e)||e instanceof Date}(c)||isNaN(c.valueOf()))throw new TypeError("option expires is invalid");p+="; Expires="+c.toUTCString()}a.httpOnly&&(p+="; HttpOnly");a.secure&&(p+="; Secure");if(a.priority){switch("string"==typeof a.priority?a.priority.toLowerCase():a.priority){case"low":p+="; Priority=Low";break;case"medium":p+="; Priority=Medium";break;case"high":p+="; Priority=High";break;default:throw new TypeError("option priority is invalid")}}if(a.sameSite){switch("string"==typeof a.sameSite?a.sameSite.toLowerCase():a.sameSite){case!0:p+="; SameSite=Strict";break;case"lax":p+="; SameSite=Lax";break;case"strict":p+="; SameSite=Strict";break;case"none":p+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}}return p};var r=Object.prototype.toString,t=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function o(e){return-1!==e.indexOf("%")?decodeURIComponent(e):e}function n(e){return encodeURIComponent(e)}function a(e,i){try{return i(e)}catch(i){return e}}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,