"use strict";exports.id="mod-node_modules_body-parser_lib_types_urlencoded_js-8a818e96",exports.ids=["mod-node_modules_body-parser_lib_types_urlencoded_js-8a818e96"],exports.modules={"./node_modules/body-parser/lib/types/urlencoded.js":(e,r,t)=>{var o=t("./node_modules/bytes/index.js"),n=t("./node_modules/content-type/index.js"),i=t("./node_modules/http-errors/index.js"),d=t("./node_modules/debug/src/index.js")("body-parser:urlencoded"),a=t("./node_modules/depd/index.js")("body-parser"),s=t("./node_modules/body-parser/lib/read.js"),u=t("./node_modules/type-is/index.js");e.exports=function(e){var r=e||{};void 0===r.extended&&a("undefined extended: provide extended option");var t=!1!==r.extended,p=!1!==r.inflate,c="number"!=typeof r.limit?o.parse(r.limit||"100kb"):r.limit,f=r.type||"application/x-www-form-urlencoded",l=r.verify||!1;if(!1!==l&&"function"!=typeof l)throw new TypeError("option verify must be function");var v=t?function(e){var r=void 0!==e.parameterLimit?e.parameterLimit:1e3,t=y("qs");if(isNaN(r)||r<1)throw new TypeError("option parameterLimit must be a positive number");isFinite(r)&&(r|=0);return function(e){var o=m(e,r);if(void 0===o)throw d("too many parameters"),i(413,"too many parameters",{type:"parameters.too.many"});var n=Math.max(100,o);return d("parse extended urlencoding"),t(e,{allowPrototypes:!0,arrayLimit:n,depth:1/0,parameterLimit:r})}}(r):function(e){var r=void 0!==e.parameterLimit?e.parameterLimit:1e3,t=y("querystring");if(isNaN(r)||r<1)throw new TypeError("option parameterLimit must be a positive number");isFinite(r)&&(r|=0);return function(e){if(void 0===m(e,r))throw d("too many parameters"),i(413,"too many parameters",{type:"parameters.too.many"});return d("parse urlencoding"),t(e,void 0,void 0,{maxKeys:r})}}(r),b="function"!=typeof f?function(e){return function(r){return Boolean(u(r,e))}}(f):f;function _(e){return e.length?v(e):{}}return function(e,r,t){if(e._body)return d("body already parsed"),void t();if(e.body=e.body||{},!u.hasBody(e))return d("skip empty body"),void t();if(d("content-type %j",e.headers["content-type"]),!b(e))return d("skip parsing"),void t();var o=function(e){try{return(n.parse(e).parameters.charset||"").toLowerCase()}catch(e){return}}(e)||"utf-8";if("utf-8"!==o)return d("invalid charset"),void t(i(415,'unsupported charset "'+o.toUpperCase()+'"',{charset:o,type:"charset.unsupported"}));s(e,r,t,_,d,{debug:d,encoding:o,inflate:p,limit:c,verify:l})}};var p=Object.create(null);function m(e,r){for(var t=0,o=0;-1!==(o=e.indexOf("&",o));)if(o++,++t===r)return;return t}function y(e){var r=p[e];if(void 0!==r)return r.parse;switch(e){case"qs":r=t("./node_modules/qs/lib/index.js");break;case"querystring":r=t("querystring")}return p[e]=r,r.parse}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,