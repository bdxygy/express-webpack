"use strict";exports.id="mod-node_modules_qs_lib_stringify_js-41273ac1",exports.ids=["mod-node_modules_qs_lib_stringify_js-41273ac1"],exports.modules={"./node_modules/qs/lib/stringify.js":(e,t,r)=>{var o=r("./node_modules/side-channel/index.js"),n=r("./node_modules/qs/lib/utils.js"),i=r("./node_modules/qs/lib/formats.js"),l=Object.prototype.hasOwnProperty,a={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},s=Array.isArray,f=String.prototype.split,c=Array.prototype.push,u=function(e,t){c.apply(e,s(t)?t:[t])},d=Date.prototype.toISOString,p=i.default,y={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,format:p,formatter:i.formatters[p],indices:!1,serializeDate:function(e){return d.call(e)},skipNulls:!1,strictNullHandling:!1},m={},v=function e(t,r,i,l,a,c,d,p,v,h,b,g,w,D,j,_){for(var k,N=t,x=_,O=0,S=!1;void 0!==(x=x.get(m))&&!S;){var T=x.get(t);if(O+=1,void 0!==T){if(T===O)throw new RangeError("Cyclic object value");S=!0}void 0===x.get(m)&&(O=0)}if("function"==typeof p?N=p(r,N):N instanceof Date?N=b(N):"comma"===i&&s(N)&&(N=n.maybeMap(N,(function(e){return e instanceof Date?b(e):e}))),null===N){if(a)return d&&!D?d(r,y.encoder,j,"key",g):r;N=""}if("string"==typeof(k=N)||"number"==typeof k||"boolean"==typeof k||"symbol"==typeof k||"bigint"==typeof k||n.isBuffer(N)){if(d){var E=D?r:d(r,y.encoder,j,"key",g);if("comma"===i&&D){for(var P=f.call(String(N),","),z="",H=0;H<P.length;++H)z+=(0===H?"":",")+w(d(P[H],y.encoder,j,"value",g));return[w(E)+(l&&s(N)&&1===P.length?"[]":"")+"="+z]}return[w(E)+"="+w(d(N,y.encoder,j,"value",g))]}return[w(r)+"="+w(String(N))]}var Q,V=[];if(void 0===N)return V;if("comma"===i&&s(N))Q=[{value:N.length>0?N.join(",")||null:void 0}];else if(s(p))Q=p;else{var q=Object.keys(N);Q=v?q.sort(v):q}for(var R=l&&s(N)&&1===N.length?r+"[]":r,A=0;A<Q.length;++A){var B=Q[A],C="object"==typeof B&&void 0!==B.value?B.value:N[B];if(!c||null!==C){var F=s(N)?"function"==typeof i?i(R,B):R:R+(h?"."+B:"["+B+"]");_.set(t,O);var I=o();I.set(m,_),u(V,e(C,F,i,l,a,c,d,p,v,h,b,g,w,D,j,I))}}return V};e.exports=function(e,t){var r,n=e,f=function(e){if(!e)return y;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||y.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var r=i.default;if(void 0!==e.format){if(!l.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");r=e.format}var o=i.formatters[r],n=y.filter;return("function"==typeof e.filter||s(e.filter))&&(n=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:y.addQueryPrefix,allowDots:void 0===e.allowDots?y.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:y.charsetSentinel,delimiter:void 0===e.delimiter?y.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:y.encode,encoder:"function"==typeof e.encoder?e.encoder:y.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:y.encodeValuesOnly,filter:n,format:r,formatter:o,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:y.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:y.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:y.strictNullHandling}}(t);"function"==typeof f.filter?n=(0,f.filter)("",n):s(f.filter)&&(r=f.filter);var c,d=[];if("object"!=typeof n||null===n)return"";c=t&&t.arrayFormat in a?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var p=a[c];if(t&&"commaRoundTrip"in t&&"boolean"!=typeof t.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var m="comma"===p&&t&&t.commaRoundTrip;r||(r=Object.keys(n)),f.sort&&r.sort(f.sort);for(var h=o(),b=0;b<r.length;++b){var g=r[b];f.skipNulls&&null===n[g]||u(d,v(n[g],g,p,m,f.strictNullHandling,f.skipNulls,f.encode?f.encoder:null,f.filter,f.sort,f.allowDots,f.serializeDate,f.format,f.formatter,f.encodeValuesOnly,f.charset,h))}var w=d.join(f.delimiter),D=!0===f.addQueryPrefix?"?":"";return f.charsetSentinel&&("iso-8859-1"===f.charset?D+="utf8=%26%2310003%3B&":D+="utf8=%E2%9C%93&"),w.length>0?D+w:""}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,