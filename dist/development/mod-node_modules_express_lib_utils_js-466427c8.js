"use strict";exports.id="mod-node_modules_express_lib_utils_js-466427c8",exports.ids=["mod-node_modules_express_lib_utils_js-466427c8"],exports.modules={"./node_modules/express/lib/utils.js":(e,n,t)=>{var r=t("./node_modules/safe-buffer/index.js").Buffer,o=t("./node_modules/content-disposition/index.js"),s=t("./node_modules/content-type/index.js"),i=t("./node_modules/depd/index.js")("express"),u=t("./node_modules/array-flatten/array-flatten.js"),a=t("./node_modules/send/index.js").mime,l=t("./node_modules/etag/index.js"),d=t("./node_modules/proxy-addr/index.js"),f=t("./node_modules/qs/lib/index.js"),p=t("querystring");function c(e){return function(n,t){var o=r.isBuffer(n)?n:r.from(n,t);return l(o,e)}}function m(e){return f.parse(e,{allowPrototypes:!0})}function y(){return{}}n.etag=c({weak:!1}),n.wetag=c({weak:!0}),n.isAbsolute=function(e){return"/"===e[0]||(":"===e[1]&&("\\"===e[2]||"/"===e[2])||("\\\\"===e.substring(0,2)||void 0))},n.flatten=i.function(u,"utils.flatten: use array-flatten npm module instead"),n.normalizeType=function(e){return~e.indexOf("/")?function(e,n){for(var t=e.split(/ *; */),r={value:t[0],quality:1,params:{},originalIndex:n},o=1;o<t.length;++o){var s=t[o].split(/ *= */);"q"===s[0]?r.quality=parseFloat(s[1]):r.params[s[0]]=s[1]}return r}(e):{value:a.lookup(e),params:{}}},n.normalizeTypes=function(e){for(var t=[],r=0;r<e.length;++r)t.push(n.normalizeType(e[r]));return t},n.contentDisposition=i.function(o,"utils.contentDisposition: use content-disposition npm module instead"),n.compileETag=function(e){var t;if("function"==typeof e)return e;switch(e){case!0:case"weak":t=n.wetag;break;case!1:break;case"strong":t=n.etag;break;default:throw new TypeError("unknown value for etag function: "+e)}return t},n.compileQueryParser=function(e){var n;if("function"==typeof e)return e;switch(e){case!0:case"simple":n=p.parse;break;case!1:n=y;break;case"extended":n=m;break;default:throw new TypeError("unknown value for query parser function: "+e)}return n},n.compileTrust=function(e){return"function"==typeof e?e:!0===e?function(){return!0}:"number"==typeof e?function(n,t){return t<e}:("string"==typeof e&&(e=e.split(",").map((function(e){return e.trim()}))),d.compile(e||[]))},n.setCharset=function(e,n){if(!e||!n)return e;var t=s.parse(e);return t.parameters.charset=n,s.format(t)}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,