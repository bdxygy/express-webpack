exports.id="mod-node_modules_media-typer_index_js-66baffa9",exports.ids=["mod-node_modules_media-typer_index_js-66baffa9"],exports.modules={"./node_modules/media-typer/index.js":(e,r)=>{var t=/; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g,a=/^[\u0020-\u007e\u0080-\u00ff]+$/,n=/^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/,o=/\\([\u0000-\u007f])/g,i=/([\\"])/g,f=/^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/,s=/^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/,u=/^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;function p(e){var r=String(e);if(n.test(r))return r;if(r.length>0&&!a.test(r))throw new TypeError("invalid parameter value");return'"'+r.replace(i,"\\$1")+'"'}r.format=function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var r=e.parameters,t=e.subtype,a=e.suffix,o=e.type;if(!o||!s.test(o))throw new TypeError("invalid type");if(!t||!f.test(t))throw new TypeError("invalid subtype");var i=o+"/"+t;if(a){if(!s.test(a))throw new TypeError("invalid suffix");i+="+"+a}if(r&&"object"==typeof r)for(var u,d=Object.keys(r).sort(),y=0;y<d.length;y++){if(u=d[y],!n.test(u))throw new TypeError("invalid parameter name");i+="; "+u+"="+p(r[u])}return i},r.parse=function(e){if(!e)throw new TypeError("argument string is required");"object"==typeof e&&(e=function(e){if("function"==typeof e.getHeader)return e.getHeader("content-type");if("object"==typeof e.headers)return e.headers&&e.headers["content-type"]}(e));if("string"!=typeof e)throw new TypeError("argument string is required to be a string");var r,a,n,i=e.indexOf(";"),f=function(e){var r=u.exec(e.toLowerCase());if(!r)throw new TypeError("invalid media type");var t,a=r[1],n=r[2],o=n.lastIndexOf("+");-1!==o&&(t=n.substr(o+1),n=n.substr(0,o));var i={type:a,subtype:n,suffix:t};return i}(-1!==i?e.substr(0,i):e),s={};t.lastIndex=i;for(;a=t.exec(e);){if(a.index!==i)throw new TypeError("invalid parameter format");i+=a[0].length,r=a[1].toLowerCase(),'"'===(n=a[2])[0]&&(n=n.substr(1,n.length-2).replace(o,"$1")),s[r]=n}if(-1!==i&&i!==e.length)throw new TypeError("invalid parameter format");return f.parameters=s,f}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,