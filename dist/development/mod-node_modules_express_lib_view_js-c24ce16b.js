"use strict";exports.id="mod-node_modules_express_lib_view_js-c24ce16b",exports.ids=["mod-node_modules_express_lib_view_js-c24ce16b"],exports.modules={"./node_modules/express/lib/view.js":(e,t,s)=>{var i=s("./node_modules/debug/src/index.js")("express:view"),n=s("path"),o=s("fs"),r=n.dirname,d=n.basename,a=n.extname,h=n.join,u=n.resolve;function l(e,t){var n=t||{};if(this.defaultEngine=n.defaultEngine,this.ext=a(e),this.name=e,this.root=n.root,!this.ext&&!this.defaultEngine)throw new Error("No default engine was specified and no extension was provided.");var o=e;if(this.ext||(this.ext="."!==this.defaultEngine[0]?"."+this.defaultEngine:this.defaultEngine,o+=this.ext),!n.engines[this.ext]){var r=this.ext.slice(1);i('require "%s"',r);var d=s("./node_modules/express/lib sync recursive")(r).__express;if("function"!=typeof d)throw new Error('Module "'+r+'" does not provide a view engine.');n.engines[this.ext]=d}this.engine=n.engines[this.ext],this.path=this.lookup(o)}function p(e){i('stat "%s"',e);try{return o.statSync(e)}catch(e){return}}e.exports=l,l.prototype.lookup=function(e){var t,s=[].concat(this.root);i('lookup "%s"',e);for(var n=0;n<s.length&&!t;n++){var o=s[n],a=u(o,e),h=r(a),l=d(a);t=this.resolve(h,l)}return t},l.prototype.render=function(e,t){i('render "%s"',this.path),this.engine(this.path,e,t)},l.prototype.resolve=function(e,t){var s=this.ext,i=h(e,t),n=p(i);return n&&n.isFile()||(n=p(i=h(e,d(t,s),"index"+s)))&&n.isFile()?i:void 0}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLW5vZGVfbW9kdWxlc19leHByZXNzX2xpYl92aWV3X2pzLWMyNGNlMTZiLmpzIiwibWFwcGluZ3MiOiJzTUFlQSxJQUFJQSxFQUFRLEVBQVEsb0NBQVIsQ0FBaUIsZ0JBQ3pCQyxFQUFPLEVBQVEsUUFDZkMsRUFBSyxFQUFRLE1BT2JDLEVBQVVGLEVBQUtFLFFBQ2ZDLEVBQVdILEVBQUtHLFNBQ2hCQyxFQUFVSixFQUFLSSxRQUNmQyxFQUFPTCxFQUFLSyxLQUNaQyxFQUFVTixFQUFLTSxRQXVCbkIsU0FBU0MsRUFBS0MsRUFBTUMsR0FDbEIsSUFBSUMsRUFBT0QsR0FBVyxDQUFDLEVBT3ZCLEdBTEFFLEtBQUtDLGNBQWdCRixFQUFLRSxjQUMxQkQsS0FBS0UsSUFBTVQsRUFBUUksR0FDbkJHLEtBQUtILEtBQU9BLEVBQ1pHLEtBQUtHLEtBQU9KLEVBQUtJLE1BRVpILEtBQUtFLE1BQVFGLEtBQUtDLGNBQ3JCLE1BQU0sSUFBSUcsTUFBTSxrRUFHbEIsSUFBSUMsRUFBV1IsRUFXZixHQVRLRyxLQUFLRSxNQUVSRixLQUFLRSxJQUFnQyxNQUExQkYsS0FBS0MsY0FBYyxHQUMxQixJQUFNRCxLQUFLQyxjQUNYRCxLQUFLQyxjQUVUSSxHQUFZTCxLQUFLRSxNQUdkSCxFQUFLTyxRQUFRTixLQUFLRSxLQUFNLENBRTNCLElBQUlLLEVBQU1QLEtBQUtFLElBQUlNLE1BQU0sR0FDekJwQixFQUFNLGVBQWdCbUIsR0FHdEIsSUFBSUUsRUFBSywrQ0FBUUYsR0FBS0csVUFFdEIsR0FBa0IsbUJBQVBELEVBQ1QsTUFBTSxJQUFJTCxNQUFNLFdBQWFHLEVBQU0scUNBR3JDUixFQUFLTyxRQUFRTixLQUFLRSxLQUFPTyxDQUMzQixDQUdBVCxLQUFLVyxPQUFTWixFQUFLTyxRQUFRTixLQUFLRSxLQUdoQ0YsS0FBS1gsS0FBT1csS0FBS1ksT0FBT1AsRUFDMUIsQ0ErRUEsU0FBU1EsRUFBUXhCLEdBQ2ZELEVBQU0sWUFBYUMsR0FFbkIsSUFDRSxPQUFPQyxFQUFHd0IsU0FBU3pCLEVBQ3JCLENBQUUsTUFBTzBCLEdBQ1AsTUFDRixDQUNGLENBbEpBQyxFQUFPQyxRQUFVckIsRUFvRWpCQSxFQUFLc0IsVUFBVU4sT0FBUyxTQUFnQmYsR0FDdEMsSUFBSVIsRUFDQThCLEVBQVEsR0FBR0MsT0FBT3BCLEtBQUtHLE1BRTNCZixFQUFNLGNBQWVTLEdBRXJCLElBQUssSUFBSXdCLEVBQUksRUFBR0EsRUFBSUYsRUFBTUcsU0FBV2pDLEVBQU1nQyxJQUFLLENBQzlDLElBQUlsQixFQUFPZ0IsRUFBTUUsR0FHYkUsRUFBTTVCLEVBQVFRLEVBQU1OLEdBQ3BCMkIsRUFBTWpDLEVBQVFnQyxHQUNkRSxFQUFPakMsRUFBUytCLEdBR3BCbEMsRUFBT1csS0FBS0wsUUFBUTZCLEVBQUtDLEVBQzNCLENBRUEsT0FBT3BDLENBQ1QsRUFVQU8sRUFBS3NCLFVBQVVRLE9BQVMsU0FBZ0I1QixFQUFTNkIsR0FDL0N2QyxFQUFNLGNBQWVZLEtBQUtYLE1BQzFCVyxLQUFLVyxPQUFPWCxLQUFLWCxLQUFNUyxFQUFTNkIsRUFDbEMsRUFVQS9CLEVBQUtzQixVQUFVdkIsUUFBVSxTQUFpQjZCLEVBQUtDLEdBQzdDLElBQUl2QixFQUFNRixLQUFLRSxJQUdYYixFQUFPSyxFQUFLOEIsRUFBS0MsR0FDakJHLEVBQU9mLEVBQVF4QixHQUVuQixPQUFJdUMsR0FBUUEsRUFBS0MsV0FNakJELEVBQU9mLEVBRFB4QixFQUFPSyxFQUFLOEIsRUFBS2hDLEVBQVNpQyxFQUFNdkIsR0FBTSxRQUFVQSxNQUdwQzBCLEVBQUtDLFNBUFJ4QyxPQU9ULENBR0YsQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BiZHh5Z3kvZXhwcmVzcy13ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL2V4cHJlc3MvbGliL3ZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBleHByZXNzXG4gKiBDb3B5cmlnaHQoYykgMjAwOS0yMDEzIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3M6dmlldycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkaXJuYW1lID0gcGF0aC5kaXJuYW1lO1xudmFyIGJhc2VuYW1lID0gcGF0aC5iYXNlbmFtZTtcbnZhciBleHRuYW1lID0gcGF0aC5leHRuYW1lO1xudmFyIGpvaW4gPSBwYXRoLmpvaW47XG52YXIgcmVzb2x2ZSA9IHBhdGgucmVzb2x2ZTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXc7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgVmlld2Agd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogICAtIGBkZWZhdWx0RW5naW5lYCB0aGUgZGVmYXVsdCB0ZW1wbGF0ZSBlbmdpbmUgbmFtZVxuICogICAtIGBlbmdpbmVzYCB0ZW1wbGF0ZSBlbmdpbmUgcmVxdWlyZSgpIGNhY2hlXG4gKiAgIC0gYHJvb3RgIHJvb3QgcGF0aCBmb3IgdmlldyBsb29rdXBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBWaWV3KG5hbWUsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHRoaXMuZGVmYXVsdEVuZ2luZSA9IG9wdHMuZGVmYXVsdEVuZ2luZTtcbiAgdGhpcy5leHQgPSBleHRuYW1lKG5hbWUpO1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLnJvb3QgPSBvcHRzLnJvb3Q7XG5cbiAgaWYgKCF0aGlzLmV4dCAmJiAhdGhpcy5kZWZhdWx0RW5naW5lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBkZWZhdWx0IGVuZ2luZSB3YXMgc3BlY2lmaWVkIGFuZCBubyBleHRlbnNpb24gd2FzIHByb3ZpZGVkLicpO1xuICB9XG5cbiAgdmFyIGZpbGVOYW1lID0gbmFtZTtcblxuICBpZiAoIXRoaXMuZXh0KSB7XG4gICAgLy8gZ2V0IGV4dGVuc2lvbiBmcm9tIGRlZmF1bHQgZW5naW5lIG5hbWVcbiAgICB0aGlzLmV4dCA9IHRoaXMuZGVmYXVsdEVuZ2luZVswXSAhPT0gJy4nXG4gICAgICA/ICcuJyArIHRoaXMuZGVmYXVsdEVuZ2luZVxuICAgICAgOiB0aGlzLmRlZmF1bHRFbmdpbmU7XG5cbiAgICBmaWxlTmFtZSArPSB0aGlzLmV4dDtcbiAgfVxuXG4gIGlmICghb3B0cy5lbmdpbmVzW3RoaXMuZXh0XSkge1xuICAgIC8vIGxvYWQgZW5naW5lXG4gICAgdmFyIG1vZCA9IHRoaXMuZXh0LnNsaWNlKDEpXG4gICAgZGVidWcoJ3JlcXVpcmUgXCIlc1wiJywgbW9kKVxuXG4gICAgLy8gZGVmYXVsdCBlbmdpbmUgZXhwb3J0XG4gICAgdmFyIGZuID0gcmVxdWlyZShtb2QpLl9fZXhwcmVzc1xuXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2R1bGUgXCInICsgbW9kICsgJ1wiIGRvZXMgbm90IHByb3ZpZGUgYSB2aWV3IGVuZ2luZS4nKVxuICAgIH1cblxuICAgIG9wdHMuZW5naW5lc1t0aGlzLmV4dF0gPSBmblxuICB9XG5cbiAgLy8gc3RvcmUgbG9hZGVkIGVuZ2luZVxuICB0aGlzLmVuZ2luZSA9IG9wdHMuZW5naW5lc1t0aGlzLmV4dF07XG5cbiAgLy8gbG9va3VwIHBhdGhcbiAgdGhpcy5wYXRoID0gdGhpcy5sb29rdXAoZmlsZU5hbWUpO1xufVxuXG4vKipcbiAqIExvb2t1cCB2aWV3IGJ5IHRoZSBnaXZlbiBgbmFtZWBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHByaXZhdGVcbiAqL1xuXG5WaWV3LnByb3RvdHlwZS5sb29rdXAgPSBmdW5jdGlvbiBsb29rdXAobmFtZSkge1xuICB2YXIgcGF0aDtcbiAgdmFyIHJvb3RzID0gW10uY29uY2F0KHRoaXMucm9vdCk7XG5cbiAgZGVidWcoJ2xvb2t1cCBcIiVzXCInLCBuYW1lKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJvb3RzLmxlbmd0aCAmJiAhcGF0aDsgaSsrKSB7XG4gICAgdmFyIHJvb3QgPSByb290c1tpXTtcblxuICAgIC8vIHJlc29sdmUgdGhlIHBhdGhcbiAgICB2YXIgbG9jID0gcmVzb2x2ZShyb290LCBuYW1lKTtcbiAgICB2YXIgZGlyID0gZGlybmFtZShsb2MpO1xuICAgIHZhciBmaWxlID0gYmFzZW5hbWUobG9jKTtcblxuICAgIC8vIHJlc29sdmUgdGhlIGZpbGVcbiAgICBwYXRoID0gdGhpcy5yZXNvbHZlKGRpciwgZmlsZSk7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn07XG5cbi8qKlxuICogUmVuZGVyIHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcHJpdmF0ZVxuICovXG5cblZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihvcHRpb25zLCBjYWxsYmFjaykge1xuICBkZWJ1ZygncmVuZGVyIFwiJXNcIicsIHRoaXMucGF0aCk7XG4gIHRoaXMuZW5naW5lKHRoaXMucGF0aCwgb3B0aW9ucywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIHRoZSBmaWxlIHdpdGhpbiB0aGUgZ2l2ZW4gZGlyZWN0b3J5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlXG4gKiBAcHJpdmF0ZVxuICovXG5cblZpZXcucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKGRpciwgZmlsZSkge1xuICB2YXIgZXh0ID0gdGhpcy5leHQ7XG5cbiAgLy8gPHBhdGg+LjxleHQ+XG4gIHZhciBwYXRoID0gam9pbihkaXIsIGZpbGUpO1xuICB2YXIgc3RhdCA9IHRyeVN0YXQocGF0aCk7XG5cbiAgaWYgKHN0YXQgJiYgc3RhdC5pc0ZpbGUoKSkge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG5cbiAgLy8gPHBhdGg+L2luZGV4LjxleHQ+XG4gIHBhdGggPSBqb2luKGRpciwgYmFzZW5hbWUoZmlsZSwgZXh0KSwgJ2luZGV4JyArIGV4dCk7XG4gIHN0YXQgPSB0cnlTdGF0KHBhdGgpO1xuXG4gIGlmIChzdGF0ICYmIHN0YXQuaXNGaWxlKCkpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdGF0LCBtYXliZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHJldHVybiB7ZnMuU3RhdHN9XG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRyeVN0YXQocGF0aCkge1xuICBkZWJ1Zygnc3RhdCBcIiVzXCInLCBwYXRoKTtcblxuICB0cnkge1xuICAgIHJldHVybiBmcy5zdGF0U3luYyhwYXRoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJkZWJ1ZyIsInBhdGgiLCJmcyIsImRpcm5hbWUiLCJiYXNlbmFtZSIsImV4dG5hbWUiLCJqb2luIiwicmVzb2x2ZSIsIlZpZXciLCJuYW1lIiwib3B0aW9ucyIsIm9wdHMiLCJ0aGlzIiwiZGVmYXVsdEVuZ2luZSIsImV4dCIsInJvb3QiLCJFcnJvciIsImZpbGVOYW1lIiwiZW5naW5lcyIsIm1vZCIsInNsaWNlIiwiZm4iLCJfX2V4cHJlc3MiLCJlbmdpbmUiLCJsb29rdXAiLCJ0cnlTdGF0Iiwic3RhdFN5bmMiLCJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsInJvb3RzIiwiY29uY2F0IiwiaSIsImxlbmd0aCIsImxvYyIsImRpciIsImZpbGUiLCJyZW5kZXIiLCJjYWxsYmFjayIsInN0YXQiLCJpc0ZpbGUiXSwic291cmNlUm9vdCI6IiJ9