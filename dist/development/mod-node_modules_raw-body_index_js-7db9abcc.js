"use strict";exports.id="mod-node_modules_raw-body_index_js-7db9abcc",exports.ids=["mod-node_modules_raw-body_index_js-7db9abcc"],exports.modules={"./node_modules/raw-body/index.js":(e,n,t)=>{var r=function(){try{return t("async_hooks")}catch(e){return{}}}(),o=t("./node_modules/bytes/index.js"),i=t("./node_modules/http-errors/index.js"),d=t("./node_modules/iconv-lite/lib/index.js"),u=t("./node_modules/unpipe/index.js");e.exports=function(e,n,t){var i=t,d=n||{};!0!==n&&"string"!=typeof n||(d={encoding:n});"function"==typeof n&&(i=n,d={});if(void 0!==i&&"function"!=typeof i)throw new TypeError("argument callback must be a function");if(!i&&!global.Promise)throw new TypeError("argument callback is required");var u=!0!==d.encoding?d.encoding:"utf-8",s=o.parse(d.limit),a=null==d.length||isNaN(d.length)?null:parseInt(d.length,10);if(i)return c(e,u,a,s,function(e){var n;r.AsyncResource&&(n=new r.AsyncResource(e.name||"bound-anonymous-fn"));if(!n||!n.runInAsyncScope)return e;return n.runInAsyncScope.bind(n,e,null)}(i));return new Promise((function(n,t){c(e,u,a,s,(function(e,r){if(e)return t(e);n(r)}))}))};var s=/^Encoding not recognized: /;function c(e,n,t,r,o){var c=!1,a=!0;if(null!==r&&null!==t&&t>r)return g(i(413,"request entity too large",{expected:t,length:t,limit:r,type:"entity.too.large"}));var l=e._readableState;if(e._decoder||l&&(l.encoding||l.decoder))return g(i(500,"stream encoding should not be set",{type:"stream.encoding.set"}));if(void 0!==e.readable&&!e.readable)return g(i(500,"stream is not readable",{type:"stream.not.readable"}));var f,p=0;try{f=function(e){if(!e)return null;try{return d.getDecoder(e)}catch(n){if(!s.test(n.message))throw n;throw i(415,"specified encoding unsupported",{encoding:e,type:"encoding.unsupported"})}}(n)}catch(e){return g(e)}var y=f?"":[];function g(){for(var n=new Array(arguments.length),t=0;t<n.length;t++)n[t]=arguments[t];function r(){v(),n[0]&&function(e){u(e),"function"==typeof e.pause&&e.pause()}(e),o.apply(null,n)}c=!0,a?process.nextTick(r):r()}function m(){c||g(i(400,"request aborted",{code:"ECONNABORTED",expected:t,length:t,received:p,type:"request.aborted"}))}function b(e){c||(p+=e.length,null!==r&&p>r?g(i(413,"request entity too large",{limit:r,received:p,type:"entity.too.large"})):f?y+=f.write(e):y.push(e))}function h(e){if(!c){if(e)return g(e);if(null!==t&&p!==t)g(i(400,"request size did not match content length",{expected:t,length:t,received:p,type:"request.size.invalid"}));else g(null,f?y+(f.end()||""):Buffer.concat(y))}}function v(){y=null,e.removeListener("aborted",m),e.removeListener("data",b),e.removeListener("end",h),e.removeListener("error",h),e.removeListener("close",v)}e.on("aborted",m),e.on("close",v),e.on("data",b),e.on("end",h),e.on("error",h),a=!1}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,