"use strict";exports.id="mod-node_modules_send_index_js-87ae7f23",exports.ids=["mod-node_modules_send_index_js-87ae7f23"],exports.modules={"./node_modules/send/index.js":(e,t,r)=>{var n=r("./node_modules/http-errors/index.js"),i=r("./node_modules/debug/src/index.js")("send"),o=r("./node_modules/depd/index.js")("send"),s=r("./node_modules/destroy/index.js"),a=r("./node_modules/encodeurl/index.js"),d=r("./node_modules/escape-html/index.js"),h=r("./node_modules/etag/index.js"),f=r("./node_modules/fresh/index.js"),u=r("fs"),l=r("./node_modules/mime/mime.js"),c=r("./node_modules/send/node_modules/ms/index.js"),p=r("./node_modules/on-finished/index.js"),m=r("./node_modules/range-parser/index.js"),g=r("path"),y=r("./node_modules/statuses/index.js"),_=r("stream"),x=r("util"),v=g.extname,C=g.join,H=g.normalize,b=g.resolve,E=g.sep,T=/^ *bytes=/,N=31536e6,j=/(?:^|[\\/])\.\.(?:[\\/]|$)/;function M(e,t,r){_.call(this);var n=r||{};if(this.options=n,this.path=t,this.req=e,this._acceptRanges=void 0===n.acceptRanges||Boolean(n.acceptRanges),this._cacheControl=void 0===n.cacheControl||Boolean(n.cacheControl),this._etag=void 0===n.etag||Boolean(n.etag),this._dotfiles=void 0!==n.dotfiles?n.dotfiles:"ignore","ignore"!==this._dotfiles&&"allow"!==this._dotfiles&&"deny"!==this._dotfiles)throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');this._hidden=Boolean(n.hidden),void 0!==n.hidden&&o("hidden: use dotfiles: '"+(this._hidden?"allow":"ignore")+"' instead"),void 0===n.dotfiles&&(this._dotfiles=void 0),this._extensions=void 0!==n.extensions?L(n.extensions,"extensions option"):[],this._immutable=void 0!==n.immutable&&Boolean(n.immutable),this._index=void 0!==n.index?L(n.index,"index option"):["index.html"],this._lastModified=void 0===n.lastModified||Boolean(n.lastModified),this._maxage=n.maxAge||n.maxage,this._maxage="string"==typeof this._maxage?c(this._maxage):Number(this._maxage),this._maxage=isNaN(this._maxage)?0:Math.min(Math.max(0,this._maxage),N),this._root=n.root?b(n.root):null,!this._root&&n.from&&this.from(n.from)}function R(e,t,r){return e+" "+(r?r.start+"-"+r.end:"*")+"/"+t}function S(e,t){return'<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>'+e+"</title>\n</head>\n<body>\n<pre>"+t+"</pre>\n</body>\n</html>\n"}function w(e,t){return("function"!=typeof e.listenerCount?e.listeners(t).length:e.listenerCount(t))>0}function L(e,t){for(var r=[].concat(e||[]),n=0;n<r.length;n++)if("string"!=typeof r[n])throw new TypeError(t+" must be array of strings or false");return r}function O(e){var t=e&&Date.parse(e);return"number"==typeof t?t:NaN}e.exports=function(e,t,r){return new M(e,t,r)},e.exports.mime=l,x.inherits(M,_),M.prototype.etag=o.function((function(e){return this._etag=Boolean(e),i("etag %s",this._etag),this}),"send.etag: pass etag as option"),M.prototype.hidden=o.function((function(e){return this._hidden=Boolean(e),this._dotfiles=void 0,i("hidden %s",this._hidden),this}),"send.hidden: use dotfiles option"),M.prototype.index=o.function((function(e){var t=e?L(e,"paths argument"):[];return i("index %o",e),this._index=t,this}),"send.index: pass index as option"),M.prototype.root=function(e){return this._root=b(String(e)),i("root %s",this._root),this},M.prototype.from=o.function(M.prototype.root,"send.from: pass root as option"),M.prototype.root=o.function(M.prototype.root,"send.root: pass root as option"),M.prototype.maxage=o.function((function(e){return this._maxage="string"==typeof e?c(e):Number(e),this._maxage=isNaN(this._maxage)?0:Math.min(Math.max(0,this._maxage),N),i("max-age %d",this._maxage),this}),"send.maxage: pass maxAge as option"),M.prototype.error=function(e,t){if(w(this,"error"))return this.emit("error",function(e,t){if(!t)return n(e);return t instanceof Error?n(e,t,{expose:!1}):n(e,t)}(e,t));var r=this.res,i=y.message[e]||String(e),o=S("Error",d(i));!function(e){for(var t=function(e){return"function"!=typeof e.getHeaderNames?Object.keys(e._headers||{}):e.getHeaderNames()}(e),r=0;r<t.length;r++)e.removeHeader(t[r])}(r),t&&t.headers&&function(e,t){for(var r=Object.keys(t),n=0;n<r.length;n++){var i=r[n];e.setHeader(i,t[i])}}(r,t.headers),r.statusCode=e,r.setHeader("Content-Type","text/html; charset=UTF-8"),r.setHeader("Content-Length",Buffer.byteLength(o)),r.setHeader("Content-Security-Policy","default-src 'none'"),r.setHeader("X-Content-Type-Options","nosniff"),r.end(o)},M.prototype.hasTrailingSlash=function(){return"/"===this.path[this.path.length-1]},M.prototype.isConditionalGET=function(){return this.req.headers["if-match"]||this.req.headers["if-unmodified-since"]||this.req.headers["if-none-match"]||this.req.headers["if-modified-since"]},M.prototype.isPreconditionFailure=function(){var e=this.req,t=this.res,r=e.headers["if-match"];if(r){var n=t.getHeader("ETag");return!n||"*"!==r&&function(e){for(var t=0,r=[],n=0,i=0,o=e.length;i<o;i++)switch(e.charCodeAt(i)){case 32:n===t&&(n=t=i+1);break;case 44:n!==t&&r.push(e.substring(n,t)),n=t=i+1;break;default:t=i+1}n!==t&&r.push(e.substring(n,t));return r}(r).every((function(e){return e!==n&&e!=="W/"+n&&"W/"+e!==n}))}var i=O(e.headers["if-unmodified-since"]);if(!isNaN(i)){var o=O(t.getHeader("Last-Modified"));return isNaN(o)||o>i}return!1},M.prototype.removeContentHeaderFields=function(){var e=this.res;e.removeHeader("Content-Encoding"),e.removeHeader("Content-Language"),e.removeHeader("Content-Length"),e.removeHeader("Content-Range"),e.removeHeader("Content-Type")},M.prototype.notModified=function(){var e=this.res;i("not modified"),this.removeContentHeaderFields(),e.statusCode=304,e.end()},M.prototype.headersAlreadySent=function(){var e=new Error("Can't set headers after they are sent.");i("headers already sent"),this.error(500,e)},M.prototype.isCachable=function(){var e=this.res.statusCode;return e>=200&&e<300||304===e},M.prototype.onStatError=function(e){switch(e.code){case"ENAMETOOLONG":case"ENOENT":case"ENOTDIR":this.error(404,e);break;default:this.error(500,e)}},M.prototype.isFresh=function(){return f(this.req.headers,{etag:this.res.getHeader("ETag"),"last-modified":this.res.getHeader("Last-Modified")})},M.prototype.isRangeFresh=function(){var e=this.req.headers["if-range"];if(!e)return!0;if(-1!==e.indexOf('"')){var t=this.res.getHeader("ETag");return Boolean(t&&-1!==e.indexOf(t))}return O(this.res.getHeader("Last-Modified"))<=O(e)},M.prototype.redirect=function(e){var t=this.res;if(w(this,"directory"))this.emit("directory",t,e);else if(this.hasTrailingSlash())this.error(403);else{var r=a(function(e){for(var t=0;t<e.length&&"/"===e[t];t++);return t>1?"/"+e.substr(t):e}(this.path+"/")),n=S("Redirecting",'Redirecting to <a href="'+d(r)+'">'+d(r)+"</a>");t.statusCode=301,t.setHeader("Content-Type","text/html; charset=UTF-8"),t.setHeader("Content-Length",Buffer.byteLength(n)),t.setHeader("Content-Security-Policy","default-src 'none'"),t.setHeader("X-Content-Type-Options","nosniff"),t.setHeader("Location",r),t.end(n)}},M.prototype.pipe=function(e){var t=this._root;this.res=e;var r,n=function(e){try{return decodeURIComponent(e)}catch(e){return-1}}(this.path);if(-1===n)return this.error(400),e;if(~n.indexOf("\0"))return this.error(400),e;if(null!==t){if(n&&(n=H("."+E+n)),j.test(n))return i('malicious path "%s"',n),this.error(403),e;r=n.split(E),n=H(C(t,n))}else{if(j.test(n))return i('malicious path "%s"',n),this.error(403),e;r=H(n).split(E),n=b(n)}if(function(e){for(var t=0;t<e.length;t++){var r=e[t];if(r.length>1&&"."===r[0])return!0}return!1}(r)){var o=this._dotfiles;switch(void 0===o&&(o="."===r[r.length-1][0]?this._hidden?"allow":"ignore":"allow"),i('%s dotfile "%s"',o,n),o){case"allow":break;case"deny":return this.error(403),e;default:return this.error(404),e}}return this._index.length&&this.hasTrailingSlash()?(this.sendIndex(n),e):(this.sendFile(n),e)},M.prototype.send=function(e,t){var r=t.size,n=this.options,o={},s=this.res,a=this.req,d=a.headers.range,h=n.start||0;if(function(e){return"boolean"!=typeof e.headersSent?Boolean(e._header):e.headersSent}(s))this.headersAlreadySent();else{if(i('pipe "%s"',e),this.setHeader(e,t),this.type(e),this.isConditionalGET()){if(this.isPreconditionFailure())return void this.error(412);if(this.isCachable()&&this.isFresh())return void this.notModified()}if(r=Math.max(0,r-h),void 0!==n.end){var f=n.end-h+1;r>f&&(r=f)}if(this._acceptRanges&&T.test(d)){if(d=m(r,d,{combine:!0}),this.isRangeFresh()||(i("range stale"),d=-2),-1===d)return i("range unsatisfiable"),s.setHeader("Content-Range",R("bytes",r)),this.error(416,{headers:{"Content-Range":s.getHeader("Content-Range")}});-2!==d&&1===d.length&&(i("range %j",d),s.statusCode=206,s.setHeader("Content-Range",R("bytes",r,d[0])),h+=d[0].start,r=d[0].end-d[0].start+1)}for(var u in n)o[u]=n[u];o.start=h,o.end=Math.max(h,h+r-1),s.setHeader("Content-Length",r),"HEAD"!==a.method?this.stream(e,o):s.end()}},M.prototype.sendFile=function(e){var t=0,r=this;function n(o){if(r._extensions.length<=t)return o?r.onStatError(o):r.error(404);var s=e+"."+r._extensions[t++];i('stat "%s"',s),u.stat(s,(function(e,t){return e?n(e):t.isDirectory()?n():(r.emit("file",s,t),void r.send(s,t))}))}i('stat "%s"',e),u.stat(e,(function(t,i){return t&&"ENOENT"===t.code&&!v(e)&&e[e.length-1]!==E?n(t):t?r.onStatError(t):i.isDirectory()?r.redirect(e):(r.emit("file",e,i),void r.send(e,i))}))},M.prototype.sendIndex=function(e){var t=-1,r=this;!function n(o){if(++t>=r._index.length)return o?r.onStatError(o):r.error(404);var s=C(e,r._index[t]);i('stat "%s"',s),u.stat(s,(function(e,t){return e?n(e):t.isDirectory()?n():(r.emit("file",s,t),void r.send(s,t))}))}()},M.prototype.stream=function(e,t){var r=this,n=this.res,i=u.createReadStream(e,t);function o(){s(i,!0)}this.emit("stream",i),i.pipe(n),p(n,o),i.on("error",(function(e){o(),r.onStatError(e)})),i.on("end",(function(){r.emit("end")}))},M.prototype.type=function(e){var t=this.res;if(!t.getHeader("Content-Type")){var r=l.lookup(e);if(r){var n=l.charsets.lookup(r);i("content-type %s",r),t.setHeader("Content-Type",r+(n?"; charset="+n:""))}else i("no content-type")}},M.prototype.setHeader=function(e,t){var r=this.res;if(this.emit("headers",r,e,t),this._acceptRanges&&!r.getHeader("Accept-Ranges")&&(i("accept ranges"),r.setHeader("Accept-Ranges","bytes")),this._cacheControl&&!r.getHeader("Cache-Control")){var n="public, max-age="+Math.floor(this._maxage/1e3);this._immutable&&(n+=", immutable"),i("cache-control %s",n),r.setHeader("Cache-Control",n)}if(this._lastModified&&!r.getHeader("Last-Modified")){var o=t.mtime.toUTCString();i("modified %s",o),r.setHeader("Last-Modified",o)}if(this._etag&&!r.getHeader("ETag")){var s=h(t);i("etag %s",s),r.setHeader("ETag",s)}}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,