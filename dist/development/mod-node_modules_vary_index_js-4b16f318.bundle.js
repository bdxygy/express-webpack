"use strict";exports.id="mod-node_modules_vary_index_js-4b16f318",exports.ids=["mod-node_modules_vary_index_js-4b16f318"],exports.modules={"./node_modules/vary/index.js":r=>{r.exports=function(r,e){if(!r||!r.getHeader||!r.setHeader)throw new TypeError("res argument is required");var n=r.getHeader("Vary")||"",a=Array.isArray(n)?n.join(", "):String(n);(n=t(a,e))&&r.setHeader("Vary",n)},r.exports.append=t;var e=/^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;function t(r,t){if("string"!=typeof r)throw new TypeError("header argument is required");if(!t)throw new TypeError("field argument is required");for(var a=Array.isArray(t)?t:n(String(t)),i=0;i<a.length;i++)if(!e.test(a[i]))throw new TypeError("field argument contains an invalid header name");if("*"===r)return r;var s=r,o=n(r.toLowerCase());if(-1!==a.indexOf("*")||-1!==o.indexOf("*"))return"*";for(var d=0;d<a.length;d++){var u=a[d].toLowerCase();-1===o.indexOf(u)&&(o.push(u),s=s?s+", "+a[d]:a[d])}return s}function n(r){for(var e=0,t=[],n=0,a=0,i=r.length;a<i;a++)switch(r.charCodeAt(a)){case 32:n===e&&(n=e=a+1);break;case 44:t.push(r.substring(n,e)),n=e=a+1;break;default:e=a+1}return t.push(r.substring(n,e)),t}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLW5vZGVfbW9kdWxlc192YXJ5X2luZGV4X2pzLTRiMTZmMzE4LmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOEtBWUFBLEVBQU9DLFFBd0hQLFNBQWVDLEVBQUtDLEdBQ2xCLElBQUtELElBQVFBLEVBQUlFLFlBQWNGLEVBQUlHLFVBRWpDLE1BQU0sSUFBSUMsVUFBVSw0QkFJdEIsSUFBSUMsRUFBTUwsRUFBSUUsVUFBVSxTQUFXLEdBQy9CSSxFQUFTQyxNQUFNQyxRQUFRSCxHQUN2QkEsRUFBSUksS0FBSyxNQUNUQyxPQUFPTCxJQUdOQSxFQUFNTSxFQUFPTCxFQUFRTCxLQUN4QkQsRUFBSUcsVUFBVSxPQUFRRSxFQUUxQixFQXZJQVAsRUFBT0MsUUFBUVksT0FBU0EsRUFheEIsSUFBSUMsRUFBb0IsaUNBV3hCLFNBQVNELEVBQVFMLEVBQVFMLEdBQ3ZCLEdBQXNCLGlCQUFYSyxFQUNULE1BQU0sSUFBSUYsVUFBVSwrQkFHdEIsSUFBS0gsRUFDSCxNQUFNLElBQUlHLFVBQVUsOEJBU3RCLElBTEEsSUFBSVMsRUFBVU4sTUFBTUMsUUFBUVAsR0FFeEJBLEVBREFhLEVBQU1KLE9BQU9ULElBSVJjLEVBQUksRUFBR0EsRUFBSUYsRUFBT0csT0FBUUQsSUFDakMsSUFBS0gsRUFBa0JLLEtBQUtKLEVBQU9FLElBQ2pDLE1BQU0sSUFBSVgsVUFBVSxrREFLeEIsR0FBZSxNQUFYRSxFQUNGLE9BQU9BLEVBSVQsSUFBSUQsRUFBTUMsRUFDTlksRUFBT0osRUFBTVIsRUFBT2EsZUFHeEIsSUFBNkIsSUFBekJOLEVBQU9PLFFBQVEsT0FBc0MsSUFBdkJGLEVBQUtFLFFBQVEsS0FDN0MsTUFBTyxJQUdULElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJUixFQUFPRyxPQUFRSyxJQUFLLENBQ3RDLElBQUlDLEVBQU1ULEVBQU9RLEdBQUdGLGVBR08sSUFBdkJELEVBQUtFLFFBQVFFLEtBQ2ZKLEVBQUtLLEtBQUtELEdBQ1ZqQixFQUFNQSxFQUNGQSxFQUFNLEtBQU9RLEVBQU9RLEdBQ3BCUixFQUFPUSxHQUVmLENBRUEsT0FBT2hCLENBQ1QsQ0FVQSxTQUFTUyxFQUFPUixHQU1kLElBTEEsSUFBSWtCLEVBQU0sRUFDTkMsRUFBTyxHQUNQQyxFQUFRLEVBR0hMLEVBQUksRUFBR00sRUFBTXJCLEVBQU9VLE9BQVFLLEVBQUlNLEVBQUtOLElBQzVDLE9BQVFmLEVBQU9zQixXQUFXUCxJQUN4QixLQUFLLEdBQ0NLLElBQVVGLElBQ1pFLEVBQVFGLEVBQU1ILEVBQUksR0FFcEIsTUFDRixLQUFLLEdBQ0hJLEVBQUtGLEtBQUtqQixFQUFPdUIsVUFBVUgsRUFBT0YsSUFDbENFLEVBQVFGLEVBQU1ILEVBQUksRUFDbEIsTUFDRixRQUNFRyxFQUFNSCxFQUFJLEVBUWhCLE9BRkFJLEVBQUtGLEtBQUtqQixFQUFPdUIsVUFBVUgsRUFBT0YsSUFFM0JDLENBQ1QsQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BiZHh5Z3kvZXhwcmVzcy13ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL3ZhcnkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB2YXJ5XG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE3IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZhcnlcbm1vZHVsZS5leHBvcnRzLmFwcGVuZCA9IGFwcGVuZFxuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBmaWVsZC1uYW1lIGluIFJGQyA3MjMwIHNlYyAzLjJcbiAqXG4gKiBmaWVsZC1uYW1lICAgID0gdG9rZW5cbiAqIHRva2VuICAgICAgICAgPSAxKnRjaGFyXG4gKiB0Y2hhciAgICAgICAgID0gXCIhXCIgLyBcIiNcIiAvIFwiJFwiIC8gXCIlXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIqXCJcbiAqICAgICAgICAgICAgICAgLyBcIitcIiAvIFwiLVwiIC8gXCIuXCIgLyBcIl5cIiAvIFwiX1wiIC8gXCJgXCIgLyBcInxcIiAvIFwiflwiXG4gKiAgICAgICAgICAgICAgIC8gRElHSVQgLyBBTFBIQVxuICogICAgICAgICAgICAgICA7IGFueSBWQ0hBUiwgZXhjZXB0IGRlbGltaXRlcnNcbiAqL1xuXG52YXIgRklFTERfTkFNRV9SRUdFWFAgPSAvXlshIyQlJicqK1xcLS5eX2B8fjAtOUEtWmEtel0rJC9cblxuLyoqXG4gKiBBcHBlbmQgYSBmaWVsZCB0byBhIHZhcnkgaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBmaWVsZFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGFwcGVuZCAoaGVhZGVyLCBmaWVsZCkge1xuICBpZiAodHlwZW9mIGhlYWRlciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdoZWFkZXIgYXJndW1lbnQgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgaWYgKCFmaWVsZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZpZWxkIGFyZ3VtZW50IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIGdldCBmaWVsZHMgYXJyYXlcbiAgdmFyIGZpZWxkcyA9ICFBcnJheS5pc0FycmF5KGZpZWxkKVxuICAgID8gcGFyc2UoU3RyaW5nKGZpZWxkKSlcbiAgICA6IGZpZWxkXG5cbiAgLy8gYXNzZXJ0IG9uIGludmFsaWQgZmllbGQgbmFtZXNcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBmaWVsZHMubGVuZ3RoOyBqKyspIHtcbiAgICBpZiAoIUZJRUxEX05BTUVfUkVHRVhQLnRlc3QoZmllbGRzW2pdKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmllbGQgYXJndW1lbnQgY29udGFpbnMgYW4gaW52YWxpZCBoZWFkZXIgbmFtZScpXG4gICAgfVxuICB9XG5cbiAgLy8gZXhpc3RpbmcsIHVuc3BlY2lmaWVkIHZhcnlcbiAgaWYgKGhlYWRlciA9PT0gJyonKSB7XG4gICAgcmV0dXJuIGhlYWRlclxuICB9XG5cbiAgLy8gZW51bWVyYXRlIGN1cnJlbnQgdmFsdWVzXG4gIHZhciB2YWwgPSBoZWFkZXJcbiAgdmFyIHZhbHMgPSBwYXJzZShoZWFkZXIudG9Mb3dlckNhc2UoKSlcblxuICAvLyB1bnNwZWNpZmllZCB2YXJ5XG4gIGlmIChmaWVsZHMuaW5kZXhPZignKicpICE9PSAtMSB8fCB2YWxzLmluZGV4T2YoJyonKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gJyonXG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmbGQgPSBmaWVsZHNbaV0udG9Mb3dlckNhc2UoKVxuXG4gICAgLy8gYXBwZW5kIHZhbHVlIChjYXNlLXByZXNlcnZpbmcpXG4gICAgaWYgKHZhbHMuaW5kZXhPZihmbGQpID09PSAtMSkge1xuICAgICAgdmFscy5wdXNoKGZsZClcbiAgICAgIHZhbCA9IHZhbFxuICAgICAgICA/IHZhbCArICcsICcgKyBmaWVsZHNbaV1cbiAgICAgICAgOiBmaWVsZHNbaV1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogUGFyc2UgYSB2YXJ5IGhlYWRlciBpbnRvIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZSAoaGVhZGVyKSB7XG4gIHZhciBlbmQgPSAwXG4gIHZhciBsaXN0ID0gW11cbiAgdmFyIHN0YXJ0ID0gMFxuXG4gIC8vIGdhdGhlciB0b2tlbnNcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhlYWRlci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHN3aXRjaCAoaGVhZGVyLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgIGNhc2UgMHgyMDogLyogICAqL1xuICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCkge1xuICAgICAgICAgIHN0YXJ0ID0gZW5kID0gaSArIDFcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAweDJjOiAvKiAsICovXG4gICAgICAgIGxpc3QucHVzaChoZWFkZXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuICAgICAgICBzdGFydCA9IGVuZCA9IGkgKyAxXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbmQgPSBpICsgMVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpbmFsIHRva2VuXG4gIGxpc3QucHVzaChoZWFkZXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKVxuXG4gIHJldHVybiBsaXN0XG59XG5cbi8qKlxuICogTWFyayB0aGF0IGEgcmVxdWVzdCBpcyB2YXJpZWQgb24gYSBoZWFkZXIgZmllbGQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlc1xuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGZpZWxkXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdmFyeSAocmVzLCBmaWVsZCkge1xuICBpZiAoIXJlcyB8fCAhcmVzLmdldEhlYWRlciB8fCAhcmVzLnNldEhlYWRlcikge1xuICAgIC8vIHF1YWNrIHF1YWNrXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVzIGFyZ3VtZW50IGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIGdldCBleGlzdGluZyBoZWFkZXJcbiAgdmFyIHZhbCA9IHJlcy5nZXRIZWFkZXIoJ1ZhcnknKSB8fCAnJ1xuICB2YXIgaGVhZGVyID0gQXJyYXkuaXNBcnJheSh2YWwpXG4gICAgPyB2YWwuam9pbignLCAnKVxuICAgIDogU3RyaW5nKHZhbClcblxuICAvLyBzZXQgbmV3IGhlYWRlclxuICBpZiAoKHZhbCA9IGFwcGVuZChoZWFkZXIsIGZpZWxkKSkpIHtcbiAgICByZXMuc2V0SGVhZGVyKCdWYXJ5JywgdmFsKVxuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcyIsImZpZWxkIiwiZ2V0SGVhZGVyIiwic2V0SGVhZGVyIiwiVHlwZUVycm9yIiwidmFsIiwiaGVhZGVyIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiIsIlN0cmluZyIsImFwcGVuZCIsIkZJRUxEX05BTUVfUkVHRVhQIiwiZmllbGRzIiwicGFyc2UiLCJqIiwibGVuZ3RoIiwidGVzdCIsInZhbHMiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJpIiwiZmxkIiwicHVzaCIsImVuZCIsImxpc3QiLCJzdGFydCIsImxlbiIsImNoYXJDb2RlQXQiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9