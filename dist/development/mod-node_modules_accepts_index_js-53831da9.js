"use strict";exports.id="mod-node_modules_accepts_index_js-53831da9",exports.ids=["mod-node_modules_accepts_index_js-53831da9"],exports.modules={"./node_modules/accepts/index.js":(e,t,r)=>{var n=r("./node_modules/negotiator/index.js"),o=r("./node_modules/mime-types/index.js");function i(e){if(!(this instanceof i))return new i(e);this.headers=e.headers,this.negotiator=new n(e)}function s(e){return-1===e.indexOf("/")?o.lookup(e):e}function a(e){return"string"==typeof e}e.exports=i,i.prototype.type=i.prototype.types=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var r=0;r<t.length;r++)t[r]=arguments[r]}if(!t||0===t.length)return this.negotiator.mediaTypes();if(!this.headers.accept)return t[0];var n=t.map(s),o=this.negotiator.mediaTypes(n.filter(a))[0];return!!o&&t[n.indexOf(o)]},i.prototype.encoding=i.prototype.encodings=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var r=0;r<t.length;r++)t[r]=arguments[r]}return t&&0!==t.length?this.negotiator.encodings(t)[0]||!1:this.negotiator.encodings()},i.prototype.charset=i.prototype.charsets=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var r=0;r<t.length;r++)t[r]=arguments[r]}return t&&0!==t.length?this.negotiator.charsets(t)[0]||!1:this.negotiator.charsets()},i.prototype.lang=i.prototype.langs=i.prototype.language=i.prototype.languages=function(e){var t=e;if(t&&!Array.isArray(t)){t=new Array(arguments.length);for(var r=0;r<t.length;r++)t[r]=arguments[r]}return t&&0!==t.length?this.negotiator.languages(t)[0]||!1:this.negotiator.languages()}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,